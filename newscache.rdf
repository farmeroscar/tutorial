<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Patrick Kennedy: Testing a Flask Application using pytest</title>
	<guid>http://www.patricksoftwareblog.com/testing-a-flask-application-using-pytest/</guid>
	<link>http://www.patricksoftwareblog.com/testing-a-flask-application-using-pytest/</link>
	<description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I recently started using &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;pytest&lt;/a&gt; and it is an incredible test framework for python!  After reading Brian Okken&amp;#8217;s book titled &amp;#8220;&lt;a href=&quot;https://pragprog.com/book/bopytest/python-testing-with-pytest&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Python Testing with pytest&lt;/a&gt;&amp;#8220;, I was convinced that I wanted to start using pytest instead of the built-in unittest module that comes with python.  In this blog post, I&amp;#8217;ll explain how to test a Flask application using pytest.&lt;/p&gt;
&lt;p&gt;pytest is a test framework for python that you use to write test cases, but also to run the test cases.  After setting up your test structure, pytest makes it really easy to write tests and provides so much flexibility for running the tests.  Using pytest, I&amp;#8217;ve found that is satisfies the key aspects of a good test environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tests are fun to write&lt;/li&gt;
&lt;li&gt;tests can be written quickly by using helper functions (fixtures)&lt;/li&gt;
&lt;li&gt;tests can be executed with a single command&lt;/li&gt;
&lt;li&gt;tests run quickly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For reference, the Flask application that is referenced in this blog post can be found on GitLab: &lt;a href=&quot;https://gitlab.com/patkennedy79/flask_user_management_example&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://gitlab.com/patkennedy79/flask_user_management_example&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;Within a Flask project, I like to keep all the test cases in a separate &amp;#8216;tests&amp;#8217; folder that is at the same level as the application files:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; gutter: false; highlight: [6]; title: ; notranslate&quot;&gt;
$ tree -L 3
.
├── main.py
├── project
├── requirements.txt
├── tests
│   ├── conftest.py
│   ├── functional
│   │   ├── __init__.py
│   │   └── test_users.py
│   ├── pytest.ini
│   └── unit
│       ├── __init__.py
│       └── test_models.py
└── venv
&lt;/pre&gt;
&lt;p&gt;Additionally, I really like differentiating between unit tests and functional (integration) tests by splitting them out as separate sub-folders within the &amp;#8216;tests&amp;#8217; folder.  Full disclosure: This is the structure that Brian Okken uses in his book (&lt;a href=&quot;https://pragprog.com/book/bopytest/python-testing-with-pytest&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Python Testing with pytest&lt;/a&gt;) and I really like this structure as it allows you the flexibility to just run unit tests or just run functional tests.&lt;/p&gt;
&lt;h2&gt;Writing Unit Tests&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https://gitlab.com/patkennedy79/flask_user_management_example&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Flask User Management project&lt;/a&gt;, there is logic in the models.py file that should be tested to provide confidence that it works properly.&lt;/p&gt;
&lt;p&gt;When running pytest, it is able to automatically run any files that start with test*.py or end with *test.py.  Therefore, the file to test out the logic in models.py should be called test_models.py and it should be created in &amp;#8230;/tests/unit_tests/ directory.  Here&amp;#8217;s the first test case to write:&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
from project.models import User


def test_new_user():
    &amp;quot;&amp;quot;&amp;quot;
    GIVEN a User model
    WHEN a new User is created
    THEN check the email, hashed_password, authenticated, and role fields are defined correctly
    &amp;quot;&amp;quot;&amp;quot;
    user = User('patkennedy79@gmail.com', 'FlaskIsAwesome')
    assert new_user.email == 'patkennedy79@gmail.com'
    assert new_user.hashed_password != 'FlaskIsAwesome'
    assert not new_user.authenticated
    assert new_user.role == 'user'
&lt;/pre&gt;
&lt;p&gt;This test creates a new instance of the User class and checks that the user is initialized correctly.  Once again, I&amp;#8217;m stealing directly from Brian Okken&amp;#8217;s book (&lt;a href=&quot;https://pragprog.com/book/bopytest/python-testing-with-pytest&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Python Testing with pytest&lt;/a&gt;) with the comment for each unit test (GIVEN, WHEN, THEN sequence).  I really like this comment structure for identifying what the test case is doing.  This might seem like a lot of extra work, but I&amp;#8217;ve really found that well-commented test cases make their maintenance so much easier.&lt;/p&gt;
&lt;p&gt;To run this test case, navigate to the top-level directory of your project and run:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot;&gt;
$ pytest
&lt;/pre&gt;
&lt;p&gt;That&amp;#8217;s it!  pytest will discover all the test cases for you and run these tests.  Super easy!&lt;/p&gt;
&lt;h2&gt;Fixtures&lt;/h2&gt;
&lt;p&gt;As someone that has worked with the xUnit type of test frameworks, I&amp;#8217;m familiar with the idea of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup()&lt;/li&gt;
&lt;li&gt;&amp;#8230;run the test case&amp;#8230;&lt;/li&gt;
&lt;li&gt;Teardown()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This structure feels very familiar, but I have come to prefer the concept of &lt;a href=&quot;https://docs.pytest.org/en/latest/fixture.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;fixtures&lt;/a&gt; in pytest.  Fixtures allow you greater flexibility than Setup()/Teadown() as you can have your fixture execute with different scope:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this situation where a single class (User) is being testing, a good option for a fixture would be to create a new User.  This new User can then be created just once and used multiple times in different test cases.&lt;/p&gt;
&lt;p&gt;All fixtures are added to the &amp;#8230;/tests/conftest.py:&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
import pytest
from project.models import User


@pytest.fixture(scope='module')
def new_user():
    user = User('patkennedy79@gmail.com', 'FlaskIsAwesome')
    return user
&lt;/pre&gt;
&lt;p&gt;This fixture creates an instance of the User class and returns it for test cases within the module scope to use.  To use this fixture, change the original test case to:&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
def test_new_user(new_user):
    &amp;quot;&amp;quot;&amp;quot;
    GIVEN a User model
    WHEN a new User is created
    THEN check the email, hashed_password, authenticated, and role fields are defined correctly
    &amp;quot;&amp;quot;&amp;quot;
    assert new_user.email == 'patkennedy79@gmail.com'
    assert new_user.hashed_password != 'FlaskIsAwesome'
    assert not new_user.authenticated
    assert new_user.role == 'user'
&lt;/pre&gt;
&lt;p&gt;The fixture is run prior to this test case, because it is specified as an argument (new_user).  To illustrate what this fixture is doing, let&amp;#8217;s let pytest tell us how it is using the fixture by using the &amp;#8216;&amp;#8211;setup-show&amp;#8217; flag (I&amp;#8217;ve added two additional test cases in the test_models.py):&lt;/p&gt;
&lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot;&gt;
$ pytest --setup-show tests/unit/

=================================================== test session starts ===================================================
platform darwin -- Python 3.6.3, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: .../flask_user_management_example/tests, inifile: pytest.ini
collected 3 items                                                                                                         

tests/unit/test_models.py 
  SETUP    M new_user
        unit/test_models.py::test_new_user (fixtures used: new_user).
        unit/test_models.py::test_setting_password (fixtures used: new_user).
        unit/test_models.py::test_user_id (fixtures used: new_user).
  TEARDOWN M new_user

================================================ 3 passed in 2.02 seconds =================================================
&lt;/pre&gt;
&lt;p&gt;This output is great, because it shows that the fixture (new_user) runs before any of the test cases in unit/test_models.py.  This fixture is then used by each test case in unit/test_models.py.  Finally, the fixture is torn down.  I love this flexibility to do the standard setup/teardown at different scopes!&lt;/p&gt;
&lt;h2&gt;Writing Functional Tests&lt;/h2&gt;
&lt;p&gt;Writing functional tests are a bit more complicated, as they require more setup steps.  Instead of diving into a new test case, I want to start by writing the fixtures that will help with setting up the functional tests.&lt;/p&gt;
&lt;p&gt;The functional tests that I&amp;#8217;m going to create are testing how a user can register, log in, and log out.  In order to be able to test this functionality, we need a fully functioning Flask application running with a database.  This is where fixtures really shine, in my opinion&amp;#8230;&lt;/p&gt;
&lt;p&gt;Here is the sequence of how the functional tests should run:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new Flask application&lt;/li&gt;
&lt;li&gt;Initialize a database&lt;/li&gt;
&lt;li&gt;&amp;#8230;run the functional tests&amp;#8230;&lt;/li&gt;
&lt;li&gt;Destroy the database&lt;/li&gt;
&lt;li&gt;Stop the Flask application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I created two fixtures in &amp;#8230;/tests/conftest.py to implement this sequence&amp;#8230;&lt;/p&gt;
&lt;h3&gt;(1) Fixture for Creating the Flask Application&lt;/h3&gt;
&lt;p&gt;One of the key aspects of this sequence is having an application factory that you can use to create your Flask application (see my blog post on &lt;a href=&quot;http://www.patricksoftwareblog.com/structuring-a-flask-project/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Structuring a Flask Application&lt;/a&gt;).  The first fixture creates the Flask application:&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
@pytest.fixture(scope='module')
def test_client():
    flask_app = create_app('flask_test.cfg')

    # Flask provides a way to test your application by exposing the Werkzeug test Client
    # and handling the context locals for you.
    testing_client = flask_app.test_client()

    # Establish an application context before running the tests.
    ctx = flask_app.app_context()
    ctx.push()

    yield testing_client  # this is where the testing happens!

    ctx.pop()
&lt;/pre&gt;
&lt;p&gt;This fixture starts by creating a new Flask application via the create_app() function and a custom configuration file (flask_test.cfg).  Next, a testing client is created which will be used in the functional tests for responding to GETs and POSTs.  In order for the flask application to be able to respond to GETs and POSTs, the &lt;a href=&quot;http://flask.pocoo.org/docs/1.0/appcontext/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;application context&lt;/a&gt; needs to be pushed to be able to handle the GETs and POSTs.&lt;/p&gt;
&lt;p&gt;At this point, the &amp;#8216;yield testing_client&amp;#8217; is called to allow all the functional tests to run with the testing client that was created in this fixture.  Finally, the application context is popped to clean up the test environment.&lt;/p&gt;
&lt;h4&gt;Test Configuration&lt;/h4&gt;
&lt;p&gt;One key point to be aware of is that the parameters specified in the flask_test.cfg file are really important, especially the following:&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
# Bcrypt algorithm hashing rounds (reduced for testing purposes only!)
BCRYPT_LOG_ROUNDS = 4

# Enable the TESTING flag to disable the error catching during request handling
# so that you get better error reports when performing test requests against the application.
TESTING = True

# Disable CSRF tokens in the Forms (only valid for testing purposes!)
WTF_CSRF_ENABLED = False
&lt;/pre&gt;
&lt;p&gt;The first parameter (BCRYPT_LOG_ROUNDS) specifies the number of hashing rounds to run when doing the password hashing of the users.  This number can range from 4-15, but using the minimum value for testing purposes &lt;strong&gt;greatly&lt;/strong&gt; reduces the execution time of the tests.&lt;/p&gt;
&lt;p&gt;The next parameter (TESTING) is recommended for testing a Flask application.&lt;/p&gt;
&lt;p&gt;The last parameter (WTF_CSRF_ENABLED) is disabled, which should only ever be done during testing.  This parameter must be disabled for the tests to run, but &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_request_forgery&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;CSRF&lt;/a&gt; protection is absolutely critical when running the actual application.&lt;/p&gt;
&lt;h3&gt;(2) Fixture for Initializing the Database&lt;/h3&gt;
&lt;p&gt;The second fixture creates and initializes the database:&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
@pytest.fixture(scope='module')
def init_database():
    # Create the database and the database table
    db.create_all()

    # Insert user data
    user1 = User(email='patkennedy79@gmail.com', plaintext_password='FlaskIsAwesome')
    user2 = User(email='kennedyfamilyrecipes@gmail.com', plaintext_password='PaSsWoRd')
    db.session.add(user1)
    db.session.add(user2)

    # Commit the changes for the users
    db.session.commit()

    yield db  # this is where the testing happens!

    db.drop_all()
&lt;/pre&gt;
&lt;p&gt;This fixture creates the database (db.create_all()) and then adds two users to the database to use during functional testing.  Once again, there is a &amp;#8216;yield db&amp;#8217; statement to allow the function tests to run while using this database instance.  After all the functional tests run, the database is destroyed (db.drop_all()).&lt;/p&gt;
&lt;p&gt;Now that these fixtures are in place, it&amp;#8217;s time to write a functional test (in &amp;#8230;/tests/functional/test_users):&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
def test_home_page(test_client):
    &amp;quot;&amp;quot;&amp;quot;
    GIVEN a Flask application
    WHEN the '/' page is requested (GET)
    THEN check the response is valid
    &amp;quot;&amp;quot;&amp;quot;
    response = test_client.get('/')
    assert response.status_code == 200
    assert b&amp;quot;Welcome to the Flask User Management Example!&amp;quot; in response.data
    assert b&amp;quot;Need an account?&amp;quot; in response.data
    assert b&amp;quot;Existing user?&amp;quot; in response.data
&lt;/pre&gt;
&lt;p&gt;This functional test is requesting the home page (at the base URL of &amp;#8216;/&amp;#8217;) and checking that the status code returned is valid (200) and the html returned contains the key statements of a the home page.&lt;/p&gt;
&lt;p&gt;This functional test uses the test client for the GET request, so the &amp;#8216;test_client&amp;#8217; fixture is specified as an argument.  Since this functional test isn&amp;#8217;t using the database, the &amp;#8216;init_database&amp;#8217; fixture is not specified.&lt;/p&gt;
&lt;p&gt;To run this individual test case with the fixture execution explained, run:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot;&gt;
$ pytest --setup-show tests/functional/test_users.py::test_home_page
=================================================== test session starts ===================================================
platform darwin -- Python 3.6.3, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: .../flask_user_management_example/tests, inifile: pytest.ini
collected 1 item                                                                                                          

tests/functional/test_users.py 
SETUP    S test_client
        functional/test_users.py::test_home_page (fixtures used: test_client).
TEARDOWN S test_client

================================================ 1 passed in 0.13 seconds =================================================
&lt;/pre&gt;
&lt;p&gt;Here is a more complex test case that checks logging in and then logging out:&lt;/p&gt;
&lt;pre class=&quot;brush: python; gutter: true; title: ; notranslate&quot;&gt;
def test_valid_login_logout(test_client, init_database):
    &amp;quot;&amp;quot;&amp;quot;
    GIVEN a Flask application
    WHEN the '/login' page is posted to (POST)
    THEN check the response is valid
    &amp;quot;&amp;quot;&amp;quot;
    response = test_client.post('/login',
                                data=dict(email='patkennedy79@gmail.com', password='FlaskIsAwesome'),
                                follow_redirects=True)
    assert response.status_code == 200
    assert b&amp;quot;Thanks for logging in, patkennedy79@gmail.com!&amp;quot; in response.data
    assert b&amp;quot;Welcome patkennedy79@gmail.com!&amp;quot; in response.data
    assert b&amp;quot;Flask User Management&amp;quot; in response.data
    assert b&amp;quot;Logout&amp;quot; in response.data
    assert b&amp;quot;Login&amp;quot; not in response.data
    assert b&amp;quot;Register&amp;quot; not in response.data

    &amp;quot;&amp;quot;&amp;quot;
    GIVEN a Flask application
    WHEN the '/logout' page is requested (GET)
    THEN check the response is valid
    &amp;quot;&amp;quot;&amp;quot;
    response = test_client.get('/logout', follow_redirects=True)
    assert response.status_code == 200
    assert b&amp;quot;Goodbye!&amp;quot; in response.data
    assert b&amp;quot;Flask User Management&amp;quot; in response.data
    assert b&amp;quot;Logout&amp;quot; not in response.data
    assert b&amp;quot;Login&amp;quot; in response.data
    assert b&amp;quot;Register&amp;quot; in response.data
&lt;/pre&gt;
&lt;p&gt;Since this functional test is logging in a user, it requires using the database to access if the specified user is a registered user.  Therefore, both the &amp;#8216;test_client&amp;#8217; and &amp;#8216;init_database&amp;#8217; fixtures are specified.&lt;/p&gt;
&lt;p&gt;To illustrate the use of these fixtures, here is the command to run all of the functional tests with the use of the fixtures explained:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot;&gt;
$ pytest --setup-show tests/functional/
=================================================== test session starts ===================================================
platform darwin -- Python 3.6.3, pytest-3.4.1, py-1.5.2, pluggy-0.6.0
rootdir: .../flask_user_management_example/tests, inifile: pytest.ini
collected 7 items                                                                                                         

tests/functional/test_users.py 
SETUP    S test_client
        functional/test_users.py::test_home_page (fixtures used: test_client).
        functional/test_users.py::test_home_page_post (fixtures used: test_client).
        functional/test_users.py::test_login_page (fixtures used: test_client).
SETUP    S init_database
        functional/test_users.py::test_valid_login_logout (fixtures used: init_database, test_client).
        functional/test_users.py::test_invalid_login (fixtures used: init_database, test_client).
        functional/test_users.py::test_valid_registration (fixtures used: init_database, test_client).
        functional/test_users.py::test_invalid_registration (fixtures used: init_database, test_client).
TEARDOWN S init_database
TEARDOWN S test_client

================================================ 7 passed in 0.36 seconds =================================================
&lt;/pre&gt;
&lt;p&gt;This output is really impressive, as it shows that pytest starts by running the &amp;#8216;test_client&amp;#8217; fixture to create the Flask application.  The three test cases that just rely on the &amp;#8216;test_client&amp;#8217; fixture are then run.  At this point, the remaining tests also require the &amp;#8216;init_database&amp;#8217; fixture, so pytest runs this fixture and then the remaining test cases.  At the end, both fixtures are completed.&lt;/p&gt;
&lt;p&gt;This usage of fixtures allows for the setup of the Flask application and database to just be done once at the &amp;#8216;session&amp;#8217; scope and then have each functional test utilize this configuration.&lt;/p&gt;
&lt;p&gt;To wrap up the use of pytest, here is my favorite command for running the unit and functional tests:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; gutter: false; title: ; notranslate&quot;&gt;
$ pytest -v
&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Yes, pytest is amazing!  This blog post shows how to use pytest for testing a Flask application, but it just skims the surface of the full power of pytest.  To continue learning about pytest, I highly recommend Brian Okken&amp;#8217;s book: &lt;a href=&quot;https://pragprog.com/book/bopytest/python-testing-with-pytest&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Python Testing with pytest&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 02 May 2018 03:50:53 +0000</pubDate>
</item>
<item>
	<title>Django Weblog: Django bugfix releases: 2.0.5 and 1.11.13</title>
	<guid>https://www.djangoproject.com/weblog/2018/may/01/bugfix-releases/</guid>
	<link>https://www.djangoproject.com/weblog/2018/may/01/bugfix-releases/</link>
	<description>&lt;p&gt;Today we've issued the &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/stable/releases/2.0.5/&quot;&gt;2.0.5&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/stable/releases/1.11.13/&quot;&gt;1.11.13&lt;/a&gt;  bugfix releases.&lt;/p&gt;
&lt;p&gt;The release package and checksums are available from &lt;a class=&quot;reference external&quot; href=&quot;https://www.djangoproject.com/download/&quot;&gt;our downloads page&lt;/a&gt;, as well as from the Python Package Index. The PGP key ID used for this release is Tim Graham: 1E8ABDC773EDE252.&lt;/p&gt;</description>
	<pubDate>Wed, 02 May 2018 02:05:15 +0000</pubDate>
</item>
<item>
	<title>Kevin Dahlhausen: Do you need a ticket to PyCon 2018?</title>
	<guid>http://powertwenty.com/blog/index.php/python/do_you_need_a_ticket_to_pycon_20183f</guid>
	<link>http://powertwenty.com/blog/index.php/python/do_you_need_a_ticket_to_pycon_20183f</link>
	<description>&lt;p&gt;I have one ticket (main conference, no tutorials) for Pycon 2018 in Cleveland that I will not be able to use.   It is at the the early-bird rate of $350.   Please contact me if you are interested in it.&lt;/p&gt;</description>
	<pubDate>Tue, 01 May 2018 19:57:27 +0000</pubDate>
</item>
<item>
	<title>Malthe Borch: The technical interview</title>
	<guid>https://maltheborch.com/2016/12/the-technical-interview.html</guid>
	<link>https://maltheborch.com/2016/12/the-technical-interview.html</link>
	<description>&lt;p&gt;&lt;a href=&quot;http://dilbert.com/strip/2003-08-27&quot;&gt;&lt;img src=&quot;https://maltheborch.com/images/d59faba80e853bbaf40fe8dcfb8305ee.png&quot; alt=&quot;Dilbert, Wednesday August 27, 2003&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;
                  The key to passing a technical interview is to stop and think.
                &lt;/p&gt;&lt;blockquote&gt;&lt;i&gt;If she says she can do it&lt;br /&gt;
                    Then she can do it,&lt;br /&gt;
                    She don't make false claims&lt;/i&gt;&lt;br /&gt;&lt;span class=&quot;content-attribution&quot;&gt;– David Bowie&lt;/span&gt;&lt;/blockquote&gt;</description>
	<pubDate>Tue, 01 May 2018 16:41:51 +0000</pubDate>
</item>
<item>
	<title>Malthe Borch: Art</title>
	<guid>https://maltheborch.com/2006/07/finish-my-art.html</guid>
	<link>https://maltheborch.com/2006/07/finish-my-art.html</link>
	<description>&lt;p&gt;&lt;img src=&quot;https://maltheborch.com/images/grant.jpg&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 01 May 2018 16:41:51 +0000</pubDate>
</item>
<item>
	<title>Real Python: Python Metaclasses</title>
	<guid>https://realpython.com/python-metaclasses/</guid>
	<link>https://realpython.com/python-metaclasses/</link>
	<description>&lt;p&gt;The term &lt;strong&gt;metaprogramming&lt;/strong&gt; refers to the potential for a program to have knowledge of or manipulate itself.  Python supports a form of metaprogramming for classes called &lt;strong&gt;metaclasses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Metaclasses are an esoteric &lt;a href=&quot;https://realpython.com/python3-object-oriented-programming/&quot;&gt;OOP concept&lt;/a&gt;, lurking behind virtually all Python code.  You are using them whether you are aware of it or not.  For the most part, you don&amp;rsquo;t need to be aware of it.  Most Python programmers rarely, if ever, have to think about metaclasses.&lt;/p&gt;
&lt;p&gt;When the need arises, however, Python provides a capability that not all object-oriented languages support:  you can get under the hood and define custom metaclasses.  The use of custom metaclasses is somewhat controversial, as suggested by the following quote from Tim Peters, the Python guru who authored the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020&quot;&gt;Zen of Python&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Metaclasses are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don&amp;rsquo;t (the people who actually need them know with certainty that they need them, and don&amp;rsquo;t need an explanation about why).&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;em&gt;Tim Peters&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are Pythonistas (as Python aficionados are known) who believe that you should never use custom metaclasses.  That might be going a bit far, but it is probably true that custom metaclasses mostly aren&amp;rsquo;t necessary.  If it isn&amp;rsquo;t pretty obvious that a problem calls for them, then it will probably be cleaner and more readable if solved in a simpler way.&lt;/p&gt;
&lt;p&gt;Still, understanding Python metaclasses is worthwhile, because it leads to a better understanding of the internals of Python classes in general.  You never know: you may one day find yourself in one of those situations where you just know that a custom metaclass is what you want.&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Get Notified:&lt;/strong&gt; Don't miss the follow up to this tutorial—&lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Click here to join the Real Python Newsletter&lt;/a&gt; and you'll know when the next instalment comes out.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;old-style-vs-new-style-classes&quot;&gt;Old-Style vs. New-Style Classes&lt;/h2&gt;
&lt;p&gt;In the Python realm, a class &lt;a href=&quot;https://wiki.python.org/moin/NewClassVsClassicClass&quot;&gt;can be one of two varieties&lt;/a&gt;.  No official terminology has been decided on, so they are informally referred to as old-style and new-style classes.&lt;/p&gt;
&lt;h3 id=&quot;old-style-classes&quot;&gt;Old-Style Classes&lt;/h3&gt;
&lt;p&gt;With old-style classes, class and type are not quite the same thing.  An instance of an old-style class is always implemented from a single built-in type called &lt;code&gt;instance&lt;/code&gt;.  If &lt;code&gt;obj&lt;/code&gt; is an instance of an old-style class, &lt;code&gt;obj.__class__&lt;/code&gt; designates the class, but &lt;code&gt;type(obj)&lt;/code&gt; is always &lt;code&gt;instance&lt;/code&gt;.  The following example is taken from Python 2.7:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class __main__.Foo at 0x000000000535CC48&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;type 'instance'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;new-style-classes&quot;&gt;New-Style Classes&lt;/h3&gt;
&lt;p&gt;New-style classes unify the concepts of class and type.  If &lt;code&gt;obj&lt;/code&gt; is an instance of a new-style class, &lt;code&gt;type(obj)&lt;/code&gt; is the same as &lt;code&gt;obj.__class__&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.Foo'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.Foo'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'y'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;type-and-class&quot;&gt;Type and Class&lt;/h2&gt;
&lt;p&gt;In Python 3, all classes are new-style classes.  Thus, in Python 3 it is reasonable to refer to an object&amp;rsquo;s type and its class interchangeably.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Python 2, classes are old-style by default.  Prior to Python 2.2, new-style classes weren&amp;rsquo;t supported at all. From Python 2.2 onward, they can be created but must be explicitly declared as new-style.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Remember that, &lt;a href=&quot;https://mail.python.org/pipermail/python-list/2015-June/691689.html&quot;&gt;in Python, everything is an object.&lt;/a&gt; Classes are objects as well. As a result, a class must have a type.  What is the type of a class?&lt;/p&gt;
&lt;p&gt;Consider the following:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.Foo'&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The type of &lt;code&gt;x&lt;/code&gt; is class &lt;code&gt;Foo&lt;/code&gt;, as you would expect.  But the type of &lt;code&gt;Foo&lt;/code&gt;, the class itself, is &lt;code&gt;type&lt;/code&gt;.  In general, the type of any new-style class is &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The type of the built-in classes you are familiar with is also &lt;code&gt;type&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For that matter, the type of &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;type&lt;/code&gt; as well (yes, really):&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;type&lt;/code&gt; is a metaclass, of which classes are instances.  Just as an ordinary object is an instance of a class, any new-style class in Python, and thus any class in Python 3, is an instance of the &lt;code&gt;type&lt;/code&gt; metaclass.&lt;/p&gt;
&lt;p&gt;In the above case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; is an instance of class &lt;code&gt;Foo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Foo&lt;/code&gt; is an instance of the &lt;code&gt;type&lt;/code&gt; metaclass.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; is also an instance of the &lt;code&gt;type&lt;/code&gt; metaclass, so it is an instance of itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/class-chain.5cb031a299fe.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/class-chain.5cb031a299fe.png&quot; width=&quot;155&quot; height=&quot;304&quot; alt=&quot;class chain&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;defining-a-class-dynamically&quot;&gt;Defining a Class Dynamically&lt;/h2&gt;
&lt;p&gt;The built-in &lt;code&gt;type()&lt;/code&gt; function, when passed one argument, returns the type of an object.  For new-style classes, that is generally the same as the &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#instance.__class__&quot;&gt;object&amp;rsquo;s &lt;code&gt;__class__&lt;/code&gt; attribute&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'int'&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'baz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'list'&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class 'tuple'&amp;gt;&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.Foo'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also call &lt;code&gt;type()&lt;/code&gt; with three arguments&amp;mdash;&lt;code&gt;type(&amp;lt;name&amp;gt;, &amp;lt;bases&amp;gt;, &amp;lt;dct&amp;gt;)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; specifies the class name.  This becomes the &lt;code&gt;__name__&lt;/code&gt; attribute of the class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;bases&amp;gt;&lt;/code&gt; specifies a tuple of the base classes from which the class inherits.  This becomes the &lt;code&gt;__bases__&lt;/code&gt; attribute of the class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;dct&amp;gt;&lt;/code&gt; specifies a namespace dictionary containing definitions for the class body.  This becomes the &lt;code&gt;__dict__&lt;/code&gt; attribute of the class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calling &lt;code&gt;type()&lt;/code&gt; in this manner creates a new instance of the &lt;code&gt;type&lt;/code&gt; metaclass.  In other words, it dynamically creates a new class.&lt;/p&gt;
&lt;p&gt;In each of the following examples, the top snippet defines a class dynamically with &lt;code&gt;type()&lt;/code&gt;, while the snippet below it defines the class the usual way, with the &lt;code&gt;class&lt;/code&gt; statement.  In each case, the two snippets are functionally equivalent.&lt;/p&gt;
&lt;h3 id=&quot;example-1&quot;&gt;Example 1&lt;/h3&gt;
&lt;p&gt;In this first example, the &lt;code&gt;&amp;lt;bases&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;dct&amp;gt;&lt;/code&gt; arguments passed to &lt;code&gt;type()&lt;/code&gt; are both empty. No inheritance from any parent class is specified, and nothing is initially placed in the namespace dictionary.  This is the simplest class definition possible:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;__main__.Foo object at 0x04CFAD50&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;__main__.Foo object at 0x0370AD50&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example 2&lt;/h3&gt;
&lt;p&gt;Here, &lt;code&gt;&amp;lt;bases&amp;gt;&lt;/code&gt; is a tuple with a single element &lt;code&gt;Foo&lt;/code&gt;, specifying the parent class that &lt;code&gt;Bar&lt;/code&gt; inherits from.  An attribute, &lt;code&gt;attr&lt;/code&gt;, is initially placed into the namespace dictionary:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.Bar'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__bases__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;lt;class '__main__.Foo'&amp;gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.Bar'&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__bases__&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(&amp;lt;class '__main__.Foo'&amp;gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;example-3&quot;&gt;Example 3&lt;/h3&gt;
&lt;p&gt;This time, &lt;code&gt;&amp;lt;bases&amp;gt;&lt;/code&gt; is again empty.  Two objects are placed into the namespace dictionary via the &lt;code&gt;&amp;lt;dct&amp;gt;&lt;/code&gt; argument.  The first is an attribute named &lt;code&gt;attr&lt;/code&gt; and the second a function named &lt;code&gt;attr_val&lt;/code&gt;, which becomes a method of the defined class:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'attr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'attr_val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attr_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;example-4&quot;&gt;Example 4&lt;/h3&gt;
&lt;p&gt;Only very simple functions can be defined with &lt;a href=&quot;https://dbader.org/blog/python-lambda-functions&quot;&gt;&lt;code&gt;lambda&lt;/code&gt; in Python&lt;/a&gt;.  In the following example, a slightly more complex function is defined externally then assigned to &lt;code&gt;attr_val&lt;/code&gt; in the namespace dictionary via the name &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'attr ='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'attr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;s1&quot;&gt;'attr_val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;attr = 100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'attr ='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;attr_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;attr = 100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;custom-metaclasses&quot;&gt;Custom Metaclasses&lt;/h2&gt;
&lt;p&gt;Consider again this well-worn example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The expression &lt;code&gt;Foo()&lt;/code&gt; creates a new instance of class &lt;code&gt;Foo&lt;/code&gt;.  When the interpreter encounters &lt;code&gt;Foo()&lt;/code&gt;, the following occurs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;__call__()&lt;/code&gt; method of &lt;code&gt;Foo&lt;/code&gt;&amp;rsquo;s parent class is called.  Since &lt;code&gt;Foo&lt;/code&gt; is a standard new-style class, its parent class is the &lt;code&gt;type&lt;/code&gt; metaclass, so &lt;code&gt;type&lt;/code&gt;&amp;rsquo;s &lt;code&gt;__call__()&lt;/code&gt; method is invoked.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That &lt;code&gt;__call__()&lt;/code&gt; method in turn invokes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If &lt;code&gt;Foo&lt;/code&gt; does not define &lt;code&gt;__new__()&lt;/code&gt; and &lt;code&gt;__init__()&lt;/code&gt;, default methods are inherited from &lt;code&gt;Foo&lt;/code&gt;&amp;rsquo;s ancestry.  But if &lt;code&gt;Foo&lt;/code&gt; does define these methods, they override those from the ancestry, which allows for customized behavior when instantiating &lt;code&gt;Foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the following, a custom method called &lt;code&gt;new()&lt;/code&gt; is defined and assigned as the &lt;code&gt;__new__()&lt;/code&gt; method for &lt;code&gt;Foo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__new__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This modifies the instantiation behavior of class &lt;code&gt;Foo&lt;/code&gt;:  each time an instance of &lt;code&gt;Foo&lt;/code&gt; is created, by default it is initialized with an attribute called &lt;code&gt;attr&lt;/code&gt;, which has a value of &lt;code&gt;100&lt;/code&gt;. (Code like this would more usually appear in the &lt;code&gt;__init__()&lt;/code&gt; method and not typically in &lt;code&gt;__new__()&lt;/code&gt;.  This example is contrived for demonstration purposes.)&lt;/p&gt;
&lt;p&gt;Now, as has already been reiterated, classes are objects too.  Suppose you wanted to similarly customize instantiation behavior when creating a class like &lt;code&gt;Foo&lt;/code&gt;.  If you were to follow the pattern above, you&amp;rsquo;d again define a custom method and assign it as the &lt;code&gt;__new__()&lt;/code&gt; method for the class of which &lt;code&gt;Foo&lt;/code&gt; is an instance.  &lt;code&gt;Foo&lt;/code&gt; is an instance of the &lt;code&gt;type&lt;/code&gt; metaclass, so the code looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;# Spoiler alert:  This doesn't work!&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__new__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;pyshell#77&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__new__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;can't set attributes of built-in/extension type 'type'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Except, as you can see, you can&amp;rsquo;t reassign the &lt;code&gt;__new__()&lt;/code&gt; method of the &lt;code&gt;type&lt;/code&gt; metaclass. Python doesn&amp;rsquo;t allow it.&lt;/p&gt;
&lt;p&gt;This is probably just as well. &lt;code&gt;type&lt;/code&gt; is the metaclass from which all new-style classes are derived.  You really shouldn&amp;rsquo;t be mucking around with it anyway.  But then what recourse is there, if you want to customize instantiation of a class?&lt;/p&gt;
&lt;p&gt;One possible solution is a custom metaclass.  Essentially, instead of mucking around with the &lt;code&gt;type&lt;/code&gt; metaclass, you can define your own metaclass, which derives from &lt;code&gt;type&lt;/code&gt;, and then you can muck around with that instead.&lt;/p&gt;
&lt;p&gt;The first step is to define a metaclass that derives from &lt;code&gt;type&lt;/code&gt;, as follows:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The definition header &lt;code&gt;class Meta(type):&lt;/code&gt; specifies that &lt;code&gt;Meta&lt;/code&gt; derives from &lt;code&gt;type&lt;/code&gt;.  Since &lt;code&gt;type&lt;/code&gt; is a metaclass, that makes &lt;code&gt;Meta&lt;/code&gt; a metaclass as well.&lt;/p&gt;
&lt;p&gt;Note that a custom &lt;code&gt;__new__()&lt;/code&gt; method has been defined for &lt;code&gt;Meta&lt;/code&gt;. It wasn&amp;rsquo;t possible to do that to the &lt;code&gt;type&lt;/code&gt; metaclass directly.  The &lt;code&gt;__new__()&lt;/code&gt; method does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delegates via &lt;code&gt;super()&lt;/code&gt; to the &lt;code&gt;__new__()&lt;/code&gt; method of the parent metaclass (&lt;code&gt;type&lt;/code&gt;) to actually create a new class&lt;/li&gt;
&lt;li&gt;Assigns the custom attribute &lt;code&gt;attr&lt;/code&gt; to the class, with a value of &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Returns the newly created class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now the other half of the voodoo:  Define a new class &lt;code&gt;Foo&lt;/code&gt; and specify that its metaclass is the custom metaclass &lt;code&gt;Meta&lt;/code&gt;, rather than the standard metaclass &lt;code&gt;type&lt;/code&gt;.  This is done using the &lt;code&gt;metaclass&lt;/code&gt; keyword in the class definition as follows:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Voila!&lt;/em&gt; &lt;code&gt;Foo&lt;/code&gt; has picked up the &lt;code&gt;attr&lt;/code&gt; attribute automatically from the &lt;code&gt;Meta&lt;/code&gt; metaclass.  Of course, any other classes you define similarly will do likewise:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(100, 100)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the same way that a class functions as a template for the creation of objects, a metaclass functions as a template for the creation of classes.  Metaclasses are sometimes referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)&quot;&gt;class factories&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Compare the following two examples:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Object Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Class Factory:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;is-this-really-necessary&quot;&gt;Is This Really Necessary?&lt;/h2&gt;
&lt;p&gt;As simple as the above class factory example is, it is the essence of how metaclasses work. They allow customization of class instantiation.&lt;/p&gt;
&lt;p&gt;Still, this is a lot of fuss just to bestow the custom attribute &lt;code&gt;attr&lt;/code&gt; on each newly created class. Do you really need a metaclass just for that?&lt;/p&gt;
&lt;p&gt;In Python, there are at least a couple other ways in which effectively the same thing can be accomplished:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple Inheritance:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Class Decorator:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NewClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewClass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@decorator&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@decorator&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@decorator&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As Tim Peters suggests, &lt;strong&gt;metaclasses&lt;/strong&gt; can easily veer into the realm of being a &amp;ldquo;solution in search of a problem.&amp;rdquo; It isn&amp;rsquo;t typically necessary to create custom metaclasses. If the problem at hand can be solved in a simpler way, it probably should be.  Still, it is beneficial to understand metaclasses so that you understand &lt;a href=&quot;https://realpython.com/python3-object-oriented-programming/&quot;&gt;Python classes&lt;/a&gt; in general and can recognize when a metaclass really is the appropriate tool to use.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 01 May 2018 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Robin Parmar: A crash course in project management</title>
	<guid>http://www.theatreofnoise.com/2018/04/a-crash-course-in-project-management.html</guid>
	<link>http://www.theatreofnoise.com/2018/04/a-crash-course-in-project-management.html</link>
	<description>&lt;br /&gt;&lt;b&gt;Introduction&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;A project starts as soon as you have a team of people working towards a goal. The naive approach is to start emailing backwards and forwards. This results in a mess of transactions that hides important patterns. Adding in some shared documents, say using Google Docs, only creates greater confusion. This quagmire is avoided by structuring work through project management software.&lt;br /&gt;&lt;br /&gt;But which app? There are several overlapping categories of software, and within each category are dozens, if not hundreds, of potential solutions. This article will help simplify, by explaining the core concepts and defining terms. If you are new to project management, this article should save you a few dozen confusing hours. &lt;br /&gt;&lt;br /&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-BewWxNIHQfU/WudPfQxSzPI/AAAAAAAAB4I/sDfD8b3vXP8W8IZ0joj8zNA5qC-wo1lrwCLcBGAs/s1600/pm-freedcamp-dashboard.png&quot; /&gt;&lt;br /&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;b&gt;What a project is... and isn't&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Let me start by giving an overview of different classes of software. &lt;br /&gt;&lt;br /&gt;Individuals often start the process of organising their work by using a &lt;i&gt;time management&lt;/i&gt; app. This software helps you track deadlines, make to-do lists, etc. These apps are focused on small tasks, on individuals.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Workflow software&lt;/i&gt; assists you in tasks that do not have a definitive end date. For example, I decide I want to write a blog. I am going to start now, but the work will be ongoing. Writing a blog is not a project, but can nonetheless benefit from management.&lt;br /&gt;&lt;br /&gt;The most popular example currently is kanban, a method that began in Japanese automobile manufacturing. The core component of kanban is a visual representation of your tasks as cards on a surface of fixed size. Every card represents a task. Because the space is limited, you can only have so many tasks in front of you at a time. This focuses your attention on the tasks that have the highest priority, preventing cognitive overload. &lt;br /&gt;&lt;br /&gt;Typically the surface is divided into three columns: To Do, Doing, and Done. As work happens, a task moves from left to right and is then archived. &lt;br /&gt;&lt;br /&gt;Kanban is also an example of &lt;i&gt;collaboration software&lt;/i&gt;, since most implementations are designed for teams. Specific individuals are assigned the tasks and they have dependencies. This is reflected in sophisticated kanban implementations in two ways. First, custom columns allow you to monitor tasks that are Blocked, At Risk, etc. &lt;br /&gt;&lt;br /&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-BdRltrMpk9I/WudPfaNcoNI/AAAAAAAAB4M/grzq14G7nhIHYxo9xRAZEeVU5IrlK4piQCLcBGAs/s1600/pm-freedcamp-kanban.png&quot; title=&quot;kanban layout (from Freedcamp)&quot; /&gt;&lt;br /&gt;&lt;br /&gt;Second, tasks will be divided into different rows, termed swimlanes, usually representing different team members. The overall kanban is hence a grid. It's perfectly suited to managing ongoing work.&lt;br /&gt;&lt;br /&gt;Collaboration software generally focuses on communications. This includes discussion threads, live group chat, audio and video meetings, document stores, annotation of documents, versioning, etc. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;Intranet software&lt;/i&gt; extends these tasks into a full social network for employees, facilitating sharing and collaboration. These huge programs are designed for large companies where the up-front costs and ongoing maintenance can be justified.&lt;br /&gt;&lt;br /&gt;Time management, workflow management, collaboration software, and intranets are not project management. Nonetheless many PM apps include some or all of these useful features, in order to create a unified workspace.&lt;br /&gt;&lt;br /&gt;Projects are different in having a specific beginning, end, and goal. For example, though a blog itself is not a project, writing a specific blog article is. I might begin the article today (Monday) and need to have it finished by Friday. Every article is on a specific topic and has specific resources assigned to it.&lt;br /&gt;&lt;br /&gt;Compared with the other tools, PM apps are more highly structured. This structure requires some setup time, but pays off. &lt;br /&gt;&lt;br /&gt;So, what elements make up a project?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Project team and roles&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Every project has a team. Experience has demonstrated that small teams work best, though how small depends on many factors, including the proximity of the members, the scope of the goals, and the importance of individual tasks. For software development, 3 to 4 people might be best. If you examine the contributions to open source software, it often turns out that three or four people do most of the work. But for design projects you might instead see a team of 6 to 8 people.&lt;br /&gt;&lt;br /&gt;The Ringelmann effect shows that if there are too many people on a team, contributions for each individual become lower. It's easier to hide on a big team, and defer work to others.&lt;br /&gt;&lt;br /&gt;Of course many projects are much larger. This requires that the work be divided up into smaller teams, each with a tighter scope and more limited goals. These small teams then aggregate into a complete workforce.&lt;br /&gt;&lt;br /&gt;Even in a distributed and collaborative environment, it is best if the project has a manager, a person tasked with keeping everything on track. Though every contributor should help with management, &quot;the buck stops here&quot; is nonetheless a good principle. If you wish to be more egalitarian, a given team can rotate leadership roles with each new project. &lt;br /&gt;&lt;br /&gt;There are other important roles on a team. For example, one person might be an expert on core technology. Another could be the documentation writer or chronicler. A third, the presenter and main point of communication. Sometimes it is best if these are explicitly assigned; in other cases this is not necessary.&lt;br /&gt;&lt;br /&gt;It is a principle of many design processes, including Agile methods, to include the client in the process as an active agent. PM software often allows the creation of guest accounts, and the ability to restrict permissions and manage privacy. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Time and task management&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The second chief resource is time. A project must have a realistic completion date, with provisions for overrun. The more projects a team has done, the better they will get at estimating this date. The time factor is also a matter of how much work each member will be expected to do each day/week/month. This depends on whether they are devoted solely to this project, or have other obligations. &lt;br /&gt;&lt;br /&gt;The natural tendency is to wait for a deadline before working flat out. This is why numerous small deadlines, or milestones, need to be set. Plan on incremental development towards quantifiable goals.&lt;br /&gt;&lt;br /&gt;These milestones will have dependencies. Some work can be done in parallel, but in other cases one task (e.g. testing) must wait for another (development) to be complete. It follows that tasks should be assigned priorities.&lt;br /&gt;&lt;br /&gt;It is convenient to be able to schedule recurring tasks, or create templates that can quickly be re-used. Subtasks allow simple hierarchies to be notated. &lt;br /&gt;&lt;br /&gt;An individual should be able to see their tasks in various ways, including a kanban display. Meanwhile, managers require dashboard views that integrate the entire team's work, flagging any important delays or missed milestones.&lt;br /&gt;&lt;br /&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/--qm7w6CUglo/WudPfSinnhI/AAAAAAAAB4E/eBUFUjFztXEWDBrd1NfIHLkPrTBQ-nVjgCLcBGAs/s1600/pm-freedcamp-gantt.png&quot; title=&quot;Gantt layout (from Freedcamp)&quot; /&gt;&lt;br /&gt;&lt;br /&gt;A Gantt chart is a particular bar chart that summarises a project schedule. Required tasks are listed vertically, with time on the horizontal axis. It's easy to tell from the width of each bar how long a task will take. Important milestones are marked. Dependencies can be indicated with connecting symbols. Furthermore, the colour or shading of each bar indicates progress to date. &lt;br /&gt;&lt;br /&gt;Gantt charts were once an essential part of project management, and are still likely the single best visualisation of a project's path. However, many apps have adopted more casual approaches. As a result, Gantt charts might only be available in the most expensive version of a given app. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Other resources&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Other resources include computer hardware and software, office support, and so on. A budget itemises all of these. It is important to cost out all expenses before you begin, since the last and most important resource is... money. &lt;br /&gt;&lt;br /&gt;For this reason time tracking and costing might also be included in PM software, even if this is not, strictly speaking, a project management function. Timesheet software requires every team member to allocate their time (usually in quarter hour increments) to a given project and task. A manger can then see which projects are going over-budget, and also what percentage of time is billable, what percentage is overhead. &lt;br /&gt;&lt;br /&gt;If required resources are not available, there will be productivity bottlenecks. Sometimes these are unavoidable, but it's important to know where they are and when they fall in the timeline. Managing a project is all about managing expectations. Every project is a success or failure on its own terms. A project that achieved a lot in one month with 50k budget is more successful than a project that missed its goals over a year after investing a million and change. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;As you can see, everyone means something different when they talk about project management, a potentially vast area that touches upon every business function. This summary has introduced the key terminology. Future articles might summarise feature sets and examine the available apps. &lt;br /&gt;</description>
	<pubDate>Tue, 01 May 2018 13:44:57 +0000</pubDate>
</item>
<item>
	<title>Ian Ozsvald: PyDataLondon 2018 and &amp;#8220;Creating Correct and Capable Classifiers&amp;#8221;</title>
	<guid>http://ianozsvald.com/2018/04/30/pydatalondon-2018-and-creating-correct-and-capable-classifiers/</guid>
	<link>http://ianozsvald.com/2018/04/30/pydatalondon-2018-and-creating-correct-and-capable-classifiers/</link>
	<description>&lt;p&gt;This weekend we ran &lt;a href=&quot;https://pydata.org/london2018/&quot;&gt;PyDataLondon 2018&lt;/a&gt;, the fifth iteration of our conference (connected with our monthly &lt;a href=&quot;http://www.meetup.com/PyData-London-Meetup/&quot;&gt;PyDataLondon meetup&lt;/a&gt;). This year we grew to 500 attendees! Read about the past &lt;a href=&quot;http://ianozsvald.com/2017/06/01/pydatalondon-2017-conference-write-up/&quot;&gt;PyDataLondon 2017 here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a summary of what we covered with 500 attendees over 3 days:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Packed &lt;a href=&quot;https://pydata.org/london2018/schedule/&quot;&gt;schedule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Three new chair persons &amp;#8211; &lt;a href=&quot;https://marcobonzanini.com/&quot;&gt;Marco&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/cecilialiao&quot;&gt;Cecilia&lt;/a&gt; and &lt;a href=&quot;https://github.com/kynan&quot;&gt;Florian&lt;/a&gt; &amp;#8211; thanks for making the conference so great!&lt;/li&gt;
&lt;li&gt;Two sessions of lightning talks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/frathgeber/status/990195037874151424&quot;&gt;Book signing&lt;/a&gt; with &lt;a href=&quot;https://twitter.com/holdenkarau/status/990181284998676480&quot;&gt;Holden&lt;/a&gt; Karau (Spark), Steve Holden (Python Core) and myself (High Performance Python)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/cheukting_ho/status/990217512955666432&quot;&gt;Algorithmic art&lt;/a&gt; &lt;a href=&quot;https://twitter.com/CelineBoudier/status/990222595567112192&quot;&gt;hackathon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/cheukting_ho/status/990189628211826689&quot;&gt;Pandas Sprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hackathons for Art and Politics and Open Source Contributions&lt;/li&gt;
&lt;li&gt;A bigger and crazier Pub Quiz by the inimitable &lt;a href=&quot;http://seriously.dontusethiscode.com/&quot;&gt;James Powell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Slack channel to support collaboration&lt;/li&gt;
&lt;li&gt;Diversity lunch&lt;/li&gt;
&lt;li&gt;Creche&lt;/li&gt;
&lt;li&gt;Beginner &lt;a href=&quot;https://photos.google.com/share/AF1QipOlTbbAmiKd9fml2KOt3sxhAfAb7sLy7U8WEzxrOisRGGwM5AkKFjuYAnXCxI8U6w/photo/AF1QipPJ5xQfE15b41RAEnp6SgGwDFc-PGv3YAxy1F6V?key=WG5YOWNOSGE1Ml81c0hhQXk2NTAzSV9PQnRCUGNB&quot;&gt;bootcamp&lt;/a&gt; the day before the conference (thanks Conrad!)&lt;/li&gt;
&lt;li&gt;Look here for &lt;a href=&quot;https://photos.google.com/share/AF1QipOlTbbAmiKd9fml2KOt3sxhAfAb7sLy7U8WEzxrOisRGGwM5AkKFjuYAnXCxI8U6w?key=WG5YOWNOSGE1Ml81c0hhQXk2NTAzSV9PQnRCUGNB&quot;&gt;many more photos&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On Thursday morning I &lt;a href=&quot;https://twitter.com/cecilialiao/status/990160852715175936&quot;&gt;co-ran&lt;/a&gt; a &amp;#8220;Make your first open source contribution&amp;#8221; with Nick (of &lt;a href=&quot;https://www.meetup.com/PyData-Edinburgh/&quot;&gt;PyDataEdinburgh&lt;/a&gt;). We had a group who&amp;#8217;d rarely (or never) made a contribution to github. We managed to commit a &lt;a href=&quot;https://github.com/tdda/tdda/pull/6&quot;&gt;couple&lt;/a&gt; of minor &lt;a href=&quot;https://github.com/tdda/tdda/pull/7&quot;&gt;doc fixes&lt;/a&gt;, &lt;a href=&quot;https://github.com/TeamHG-Memex/eli5/issues/256&quot;&gt;recreated a bug in ELI5&lt;/a&gt; and subsequently a new (failing) test was &lt;a href=&quot;https://github.com/TeamHG-Memex/eli5/pull/261&quot;&gt;submitted&lt;/a&gt; to the project. Great success! I&amp;#8217;m interested in &lt;a href=&quot;https://github.com/pandas-profiling/pandas-profiling/issues/68&quot;&gt;another bug&lt;/a&gt; if you want to make a &lt;a href=&quot;https://twitter.com/miguelmalvarez/status/990511369253478400&quot;&gt;contribution&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Great example of how to include the new starters in the community. Way to go &lt;a href=&quot;https://twitter.com/ianozsvald?ref_src=twsrc%5Etfw&quot;&gt;@ianozsvald&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/njr0?ref_src=twsrc%5Etfw&quot;&gt;@njr0&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/pydatalondon?ref_src=twsrc%5Etfw&quot;&gt;@pydatalondon&lt;/a&gt;! &lt;a href=&quot;https://twitter.com/hashtag/PyDataLDN?src=hash&amp;ref_src=twsrc%5Etfw&quot;&gt;#PyDataLDN&lt;/a&gt; &lt;a href=&quot;https://t.co/K9sq4mRUJ7&quot;&gt;https://t.co/K9sq4mRUJ7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;mdash; Miguel Martinez (@miguelmalvarez) &lt;a href=&quot;https://twitter.com/miguelmalvarez/status/990161907293319170?ref_src=twsrc%5Etfw&quot;&gt;April 28, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Each room was packed with 150-200 people (with a comfy number of chairs for everyone!):&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Great to be back at &lt;a href=&quot;https://twitter.com/hashtag/PyDataLDN?src=hash&amp;ref_src=twsrc%5Etfw&quot;&gt;#PyDataLDN&lt;/a&gt; again! Really interesting talks this morning on modelling techniques and evaluation from Anna Veronika Dorogush &lt;a href=&quot;https://twitter.com/yandexcom?ref_src=twsrc%5Etfw&quot;&gt;@yandexcom&lt;/a&gt;, Thomas Huijskens and &lt;a href=&quot;https://twitter.com/ianozsvald?ref_src=twsrc%5Etfw&quot;&gt;@ianozsvald&lt;/a&gt;. &lt;a href=&quot;https://t.co/qVTaOiOMNV&quot;&gt;pic.twitter.com/qVTaOiOMNV&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;mdash; Andrew Weeks (@meloncholy) &lt;a href=&quot;https://twitter.com/meloncholy/status/990210112261242881?ref_src=twsrc%5Etfw&quot;&gt;April 28, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;One of our key NumFOCUS organisers is Leah Silen, she&amp;#8217;s an unsung hero who makes every conference come together. She broke her foot recently and couldn&amp;#8217;t fly over. &lt;a href=&quot;https://twitter.com/sinayoko/status/990181876366237697&quot;&gt;It&lt;/a&gt; &lt;a href=&quot;https://twitter.com/sinayoko/status/990181876366237697&quot;&gt;turns&lt;/a&gt; out the &lt;a href=&quot;https://twitter.com/AngelJSalazar/status/990181960101351424&quot;&gt;crowd&lt;/a&gt; &lt;a href=&quot;https://twitter.com/Peterfine/status/990181908012240896&quot;&gt;rather&lt;/a&gt; &lt;a href=&quot;https://twitter.com/oliverlaslett/status/990182101860470784&quot;&gt;misses&lt;/a&gt; her and &lt;a href=&quot;https://twitter.com/cristohowlo/status/990181979088936960&quot;&gt;all&lt;/a&gt; of &lt;a href=&quot;https://twitter.com/mike_w_ai/status/990181796951228416&quot;&gt;her&lt;/a&gt; &lt;a href=&quot;https://twitter.com/huynhlouis/status/990181787841257472&quot;&gt;work&lt;/a&gt;. Get well soon!&lt;/p&gt;
&lt;p&gt;At the conference I spoke on &amp;#8220;&lt;a href=&quot;https://pydata.org/london2018/schedule/presentation/32/&quot;&gt;Creating Correct and Capable Classifiers&lt;/a&gt;&amp;#8220;. We took a look at starting with a baseline model, building a better stable model, visualising errors, diagnosing where it might be failing and explaining the end results to a colleague.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Many thanks to @matti of PyDataBerlin for taking a lovely photo of our speaker-duck gift for speakers:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/mattilyra/status/990820327063281667&quot;&gt;&lt;img class=&quot;aligncenter&quot; src=&quot;https://pbs.twimg.com/media/DcAZvyMWsAAWZdi.jpg&quot; width=&quot;490&quot; height=&quot;367&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many thanks also to all of our volunteers and to the staff at the Tower Hotel &amp;#8211; thanks for making the weekend so much fun &lt;img src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f642.png&quot; alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;
Ian applies Data Science as an AI/Data Scientist for companies in &lt;a href=&quot;http://modelinsight.io/&quot;&gt;ModelInsight&lt;/a&gt; and in his &lt;a href=&quot;http://morconsulting.com&quot;&gt;Mor Consulting&lt;/a&gt;, sign-up for &lt;a href=&quot;http://eepurl.com/Z44HT&quot;&gt;Data Science tutorials in London&lt;/a&gt;. He also founded the image and text annotation API &lt;a href=&quot;http://annotate.io&quot;&gt;Annotate.io&lt;/a&gt;, lives in London and is a consumer of fine coffees.&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;http://ianozsvald.com/2018/04/30/pydatalondon-2018-and-creating-correct-and-capable-classifiers/&quot;&gt;PyDataLondon 2018 and &amp;#8220;Creating Correct and Capable Classifiers&amp;#8221;&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;http://ianozsvald.com&quot;&gt;Entrepreneurial Geekiness&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 01 May 2018 12:08:38 +0000</pubDate>
</item>
<item>
	<title>Kay Hayen: Nuitka Release 0.5.30</title>
	<guid>http://nuitka.net/posts/nuitka-release-0530.html</guid>
	<link>http://nuitka.net/posts/nuitka-release-0530.html</link>
	<description>&lt;div&gt;&lt;p&gt;This is to inform you about the new stable release of &lt;a class=&quot;reference external&quot; href=&quot;http://nuitka.net&quot;&gt;Nuitka&lt;/a&gt;. It is the extremely compatible Python compiler. Please see the page &lt;a class=&quot;reference external&quot; href=&quot;http://nuitka.net/pages/overview.html&quot;&gt;&quot;What is Nuitka?&quot;&lt;/a&gt; for an overview.&lt;/p&gt;
&lt;p&gt;This release has improvements in all areas. Many bug fixes are accompanied
with optimization changes towards value tracing.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;bug-fixes&quot;&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Fix, the new setuptools runners were not used by &lt;tt class=&quot;docutils literal&quot;&gt;pip&lt;/tt&gt; breaking the use
of Nuitka from PyPI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Fix, imports of &lt;tt class=&quot;docutils literal&quot;&gt;six.moves&lt;/tt&gt; could crash the compiler for built-in names.
Fixed in 0.5.29.2 already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Windows: Make the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;nuitka-run&lt;/span&gt;&lt;/tt&gt; not a symlink as these work really bad on
that platform, instead make it a full copy just like we did for &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;nuitka3-run&lt;/span&gt;&lt;/tt&gt;
already. Fixed in 0.5.29.2 already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Python3.5: In module mode, &lt;tt class=&quot;docutils literal&quot;&gt;types.coroutine&lt;/tt&gt; was monkey patched into an
endless recursion if including more than one module, e.g. for a package.
Fixed in 0.5.29.3 already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Python3.5: Dictionary unpackings with both star arguments and non star
arguments could leak memory. Fixed in 0.5.29.3 already.&lt;/p&gt;
&lt;pre class=&quot;code python&quot;&gt;&lt;a name=&quot;rest_code_27cf7de1252b47ee893b193a188fd704-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Fix, distutils usage was not working for Python2 anymore, due to using
&lt;tt class=&quot;docutils literal&quot;&gt;super&lt;/tt&gt; for what are old style classes on that version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Fix, some method calls to C function members could leak references.&lt;/p&gt;
&lt;pre class=&quot;code python&quot;&gt;&lt;a name=&quot;rest_code_6af515b2af494f829d84f6fb48cd6748-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;a name=&quot;rest_code_6af515b2af494f829d84f6fb48cd6748-2&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;n&quot;&gt;for_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial&lt;/span&gt;
&lt;a name=&quot;rest_code_6af515b2af494f829d84f6fb48cd6748-3&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;rest_code_6af515b2af494f829d84f6fb48cd6748-4&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;a name=&quot;rest_code_6af515b2af494f829d84f6fb48cd6748-5&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;for_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# This leaked a reference to the descriptor.&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Python3.5: The bases classes should be treated as an unpacking too.&lt;/p&gt;
&lt;pre class=&quot;code python&quot;&gt;&lt;a name=&quot;rest_code_44459900e23d4e979b9cdb077c8b0a6d-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Allowed syntax that was not supported.&lt;/span&gt;
&lt;a name=&quot;rest_code_44459900e23d4e979b9cdb077c8b0a6d-2&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;Windows: Added back batch files to run Nuitka from the command line. Fixed
in 0.5.29.5 already.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;new-features&quot;&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added option &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--include-package&lt;/span&gt;&lt;/tt&gt; to force inclusion of a whole package with
the submodules in a compilation result.&lt;/li&gt;
&lt;li&gt;Added options &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--include-module&lt;/span&gt;&lt;/tt&gt; to force inclusion of a single module in
a compilation result.&lt;/li&gt;
&lt;li&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;`multiprocessing&lt;/tt&gt; plug-in got adapted to Python 3.4 changes and will
now also work in accelerated mode on Windows.&lt;/li&gt;
&lt;li&gt;It is now possible to specify the Qt plugin directories with e.g.
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--enable-plugin=qt_plugins=imageformats&lt;/span&gt;&lt;/tt&gt; and have only those included. This
should avoid dependency creep for shared libraries.&lt;/li&gt;
&lt;li&gt;Plugins can now make the decision about recursing to a module or not.&lt;/li&gt;
&lt;li&gt;Plugins now can get their own options passed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;optimization&quot;&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;The re-raising of exceptions has gotten its own special node type. This aims
at more readability (XML output) and avoiding the overhead of checking
potential attributes during optimization.&lt;/li&gt;
&lt;li&gt;Changed built-in &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;long&lt;/tt&gt;, and &lt;tt class=&quot;docutils literal&quot;&gt;float&lt;/tt&gt; to using a slot mechanism
that also analyses the type shape and detects and warns about errors at
compile time.&lt;/li&gt;
&lt;li&gt;Changed the variable tracing to value tracing. This meant to cleanup all the
places that were using it to find the variable.&lt;/li&gt;
&lt;li&gt;Enable must have / must not value value optimization for all kinds of variables
including module and closure variables. This often avoids error exits and leads
to smaller and faster generated code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;tests&quot;&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Added burn test with local install of pip distribution to virtualenv before
making any PyPI upload. It seems pip got its specific error sources too.&lt;/li&gt;
&lt;li&gt;Avoid calling &lt;tt class=&quot;docutils literal&quot;&gt;2to3&lt;/tt&gt; and prefer &lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;python&amp;gt; &lt;span class=&quot;pre&quot;&gt;-m&lt;/span&gt; lib2to3&lt;/tt&gt; instead, as it
seems at least Debian Testing stopped to provide the binary by default. For
Python 2.6 and 3.2 we continue to rely on it, as the don't support that mode
of operation.&lt;/li&gt;
&lt;li&gt;The PyLint checks have been made more robust and even more Python3 portable.&lt;/li&gt;
&lt;li&gt;Added PyLint to Travis builds, so PRs are automatically checked too.&lt;/li&gt;
&lt;li&gt;Added test for distutils usage with Nuitka that should prevent regressions
for this new feature and to document how it can be used.&lt;/li&gt;
&lt;li&gt;Make coverage taking work on Windows and provide the full information needed,
the rendering stage is not there working yet though.&lt;/li&gt;
&lt;li&gt;Expanded the trick assignment test cases to cover more slots to find bugs
introduced with more aggressive optimization of closure variables.&lt;/li&gt;
&lt;li&gt;New test to cover multiprocessing usage.&lt;/li&gt;
&lt;li&gt;Generating more code tests out of doctests for increased coverage of
Nuitka.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;cleanups&quot;&gt;
&lt;h2&gt;Cleanups&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Stop using &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--python-version&lt;/span&gt;&lt;/tt&gt; in tests where they still remained.&lt;/li&gt;
&lt;li&gt;Split the forms of &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;long&lt;/tt&gt; into two different nodes, they share
nothing except the name. Create the constants for the zero arg variant more
immediately.&lt;/li&gt;
&lt;li&gt;Split the output comparison part into a dedicated testing module so it can
be re-used, e.g. when doing distutils tests.&lt;/li&gt;
&lt;li&gt;Removed dead code from variable closure taking.&lt;/li&gt;
&lt;li&gt;Have a dedicated module for the metaclass of nodes in the tree, so it
is easier to find, and doesn't clutter the node base classes module as
much.&lt;/li&gt;
&lt;li&gt;Have a dedicated node for reraise statements instead of checking for
all the arguments to be non-present.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;organizational&quot;&gt;
&lt;h2&gt;Organizational&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;There is now a pull request template for Github when used.&lt;/li&gt;
&lt;li&gt;Deprecating the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--python-version&lt;/span&gt;&lt;/tt&gt; argument which should be replaced by
using &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-m&lt;/span&gt; nuitka&lt;/tt&gt; with the correct Python version. Outputs have been
updated to recommend this one instead.&lt;/li&gt;
&lt;li&gt;Make automatic import sorting and autoformat tools properly executable on
Windows without them changing new lines.&lt;/li&gt;
&lt;li&gt;The documentation was updated to prefer the call method with &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-m&lt;/span&gt; nuitka&lt;/tt&gt;
and manually providing the Python binary to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;summary&quot;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This release continued the distutils integration adding first tests, but more
features and documentation will be needed.&lt;/p&gt;
&lt;p&gt;Also, for the locals dictionary work, the variable tracing was made generic,
but not yet put to use. If we use this to also trace dictionary keys, we can
expect a lot of improvements for class code again.&lt;/p&gt;
&lt;p&gt;The locals dictionary tracing will be the focus before resuming the work on
C types, where the ultimate performance boost lies. However, currently, not
the full compatibility has been achieved even with currently using dictionaries
for classes, and we would like to be able to statically optimize those better
anyway.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 01 May 2018 09:53:00 +0000</pubDate>
</item>
<item>
	<title>Vladimir Iakolev: Analyzing commute with Google Location History and Python</title>
	<guid>https://nvbn.github.io/2018/05/01/commute/</guid>
	<link>https://nvbn.github.io/2018/05/01/commute/</link>
	<description>&lt;p&gt;&lt;img src=&quot;https://nvbn.github.io/assets/commute/map.png&quot; alt=&quot;Map with commute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since I moved to Amsterdam I’m biking to work almost every morning. And as Google is
always tracking the location of my phone, I thought that it might be interesting to do
something with that data.&lt;/p&gt;

&lt;p&gt;First of all, I’ve downloaded Location History data dump in json from
&lt;a href=&quot;https://takeout.google.com/settings/takeout&quot;&gt;Download your data page&lt;/a&gt;. The format of the dump is very simple,
it’s a dict with &lt;code class=&quot;highlighter-rouge&quot;&gt;locations&lt;/code&gt; key that contains a lot of entries like this in descendant order by date:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;timestampMs&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1525120611682&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;latitudeE7&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;523508799&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;longitudeE7&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;488938179&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;accuracy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;altitude&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;verticalAccuracy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s very easy to parse it with Python:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Point'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude, longitude, datetime'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'locations'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'latitudeE7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'longitudeE7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromtimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'timestampMs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;52.350879&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.893817&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;682000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As I moved to my current place in November, it’s safe to ignore all entries before:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takewhile&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;from_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;after_move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takewhile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And weekends:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;work_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after_move&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weekday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usually, I’m heading to work between 9 am and 10 am, but as the Netherlands are switching between
summer and winter timezones, it will be safer to treat everything between 7 am and 9a m as possible commute time:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;from_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;to_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;commute_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work_days&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I grouped everything by date:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;by_days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;52.350879&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.893817&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;189000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, I selected the last point at home and the first point at work for every day. A point considered home or work
if it’s distance from home or work is smaller than 50 meters. The distance can be easily calculated with &lt;a href=&quot;https://github.com/geopy/geopy&quot;&gt;geopy&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;geopy.distance&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geodesic&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;52.350879&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.893817&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# not really =)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;52.3657573&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.8980648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;max_distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.050&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;last_at_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geodesic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_at_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geodesic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Commute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Commute'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'day, start, end, took'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_commute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_at_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_at_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Commute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;commutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_commute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()][::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commutes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Commute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;219000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;295000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;820&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s easy to plot a graph of daily commute with &lt;a href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'day'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'commute (minutes)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Daily commute'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s easy to spot days when I had appointments in the morning:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nvbn.github.io/assets/commute/line.png&quot; alt=&quot;Daily commute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I thought that it might be interesting to look for a correlation between
temperature and commute time, and wind speed and commute time. I found data dump
of daily weather that &lt;a href=&quot;http://www.knmi.nl/nederland-nu/klimatologie/daggegevens&quot;&gt;KNMI provides&lt;/a&gt;,
the nearest meteorological station is in Schiphol airport, but I guess it’s close enough.
The data is in easy to parse format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# STN,YYYYMMDD,DDVEC,FHVEC,   FG,  FHX, FHXH,  FHN, FHNH,  FXX, FXXH,   TG,   TN,  TNH,   TX,  TXH, T10N,T10NH,   SQ,   SP,    Q,   DR,   RH,  RHX, RHXH,   PG,   PX,  PXH,   PN,  PNH,  VVN, VVNH,  VVX, VVXH,   NG,   UG,   UX,  UXH,   UN,  UNH, EV24

  240,19510101,  188,   77,   87,  195,   18,   41,   24,     ,     ,   12,  -13,    1,   26,   20,     ,     ,     ,     ,     ,     ,     ,     ,     , 9891, 9957,     , 9837,     ,     ,     ,     ,     ,    7,   90,   98,    6,   73,   20,     
  240,19510102,  153,   41,   41,   82,    4,   10,   21,     ,     ,   13,    7,    4,   18,   19,     ,     ,     ,     ,     ,     ,     ,     ,     , 9876, 9923,     , 9853,     ,     ,     ,     ,     ,    8,   93,   98,    9,   88,    1,     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I only used &lt;code class=&quot;highlighter-rouge&quot;&gt;FG&lt;/code&gt; (Daily mean wind speed in 0.1 m/s) and &lt;code class=&quot;highlighter-rouge&quot;&gt;TG&lt;/code&gt; (Daily mean temperature in 0.1 degrees Celsius):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dateutil.parser&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Weather&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Weather'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'windspeed, temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weather.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1951&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windspeed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1951&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windspeed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1951&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windspeed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before doing this I’ve excluded spikes from days when I had appointments:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commutes&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I created a scatter plot of temperature and commute:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Commute time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Commute and weather'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Correlation is slightly visible, on cold days commute is a bit faster:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nvbn.github.io/assets/commute/temp.png&quot; alt=&quot;Commute and temperature&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With wind speed code is almost the same:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windspeed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Commute time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Wind speed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Commute and wind'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the correlation is more visible, the commute is slower with stronger wind:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nvbn.github.io/assets/commute/wind.png&quot; alt=&quot;Commute and wind&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I’ve tried to combine the previous two graphs in one 3d graph:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mpl_toolkits.mplot3d&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Axes3D&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot_kw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'projection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'3d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windspeed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;took&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commute&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Temperature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Wind speed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zlabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Commute time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Commute and weather'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the result didn’t give me anything:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://nvbn.github.io/assets/commute/3d.png&quot; alt=&quot;Commute and weather in 3d&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/nvbn/be3c4e470824eee54adc54404dbbc362&quot;&gt;Gist with sources.&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 01 May 2018 02:30:00 +0000</pubDate>
</item>
<item>
	<title>Python Insider: Python 2.7.15 released</title>
	<guid>http://feedproxy.google.com/~r/PythonInsider/~3/BMstxEjkOt0/python-2715-released.html</guid>
	<link>http://feedproxy.google.com/~r/PythonInsider/~3/BMstxEjkOt0/python-2715-released.html</link>
	<description>The bugfix release &lt;a href=&quot;https://www.python.org/downloads/release/python-2715/&quot;&gt;Python 2.7.15&lt;/a&gt; is now available for download.&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=BMstxEjkOt0:gB6LKhRbhNU:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=BMstxEjkOt0:gB6LKhRbhNU:-BTjWOF_DHI&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=BMstxEjkOt0:gB6LKhRbhNU:-BTjWOF_DHI&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=BMstxEjkOt0:gB6LKhRbhNU:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=BMstxEjkOt0:gB6LKhRbhNU:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=BMstxEjkOt0:gB6LKhRbhNU:V_sGLiPBpWU&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=BMstxEjkOt0:gB6LKhRbhNU:V_sGLiPBpWU&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=BMstxEjkOt0:gB6LKhRbhNU:qj6IDK7rITs&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?d=qj6IDK7rITs&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/PythonInsider/~4/BMstxEjkOt0&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Tue, 01 May 2018 00:28:49 +0000</pubDate>
</item>
<item>
	<title>PyCharm: Interview with Luciano Ramalho, webinar presenter this Thursday</title>
	<guid>http://feedproxy.google.com/~r/Pycharm/~3/fPOT-6fhQWk/</guid>
	<link>http://feedproxy.google.com/~r/Pycharm/~3/fPOT-6fhQWk/</link>
	<description>&lt;p&gt;Python’s combination of power and simplicity has long been one of its key selling points. This includes its data model. &lt;a href=&quot;https://twitter.com/ramalhoorg&quot;&gt;Luciano Ramalho&lt;/a&gt;, who is our guest presenter for the &lt;a href=&quot;https://info.jetbrains.com/pycharm-webinar-may2018.html&quot;&gt;next webinar&lt;/a&gt;, recently wrote about this in &lt;a href=&quot;http://shop.oreilly.com/product/0636920032519.do&quot;&gt;Fluent Python&lt;/a&gt;, an O’Reilly book widely considered one of the best recent books on Python.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://info.jetbrains.com/pycharm-webinar-may2018.html&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-5528&quot; src=&quot;https://d3nmt5vlzunoa1.cloudfront.net/pycharm/files/2018/04/r2.png&quot; alt=&quot;r2&quot; width=&quot;799&quot; height=&quot;541&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s another well-known strength of Python: its community, and Luciano is one of those long-time key people who is warm, inviting, smart, and part of Python’s appeal. We’re lucky to have him with us for the last webinar before PyCon and decided to do a quick interview with him.&lt;/p&gt;
&lt;h2&gt;Give us a sneak peak on what you’re going to discuss in the webinar and what audience it is aimed at.&lt;/h2&gt;
&lt;p&gt;What makes an API “Pythonic”? That’s somewhat subjective, but we can learn a lot by looking at concrete examples like the built-in set types: set and frozenset. They “feel right” because they leverage some of Python’s strongest features. The set types are iterable, so they play well with core Python constructs and with powerful libraries like itertools. They also provide handy methods that consume iterables of other types, so you can compute the union of a set and a list, for example. And they leverage operator overloading, enabling concise coding of set expressions.&lt;/p&gt;
&lt;p&gt;After covering the strengths of Python sets, I will show how to implement a new set class optimized for dense sets of integers. This talk will be accessible to anyone who knows how to write object-oriented code in Python.&lt;/p&gt;
&lt;h2&gt;This is part of what you evangelize in the book about the hidden beauty of Python’s data model. Can you explain more about that?&lt;/h2&gt;
&lt;p&gt;Once you know the basics, I believe anyone interested in mastering Python needs to learn about the Data Model: the set of core interfaces that make the language and standard library so consistent and so powerful.&lt;/p&gt;
&lt;p&gt;For example, we expect any collection type in Python to be iterable, so that we can use it in for loops and with handy functions such as sorted, any, all, dropwhile etc. The Data Model specifies the interfaces you need to implement to build an iterable collection.&lt;/p&gt;
&lt;p&gt;For debugging and testing, we want objects to be printable and comparable. Supporting operators such as + to join custom data structures? The Data Model explains how to do all of those things and more.&lt;/p&gt;
&lt;h2&gt;How are book sales and what was it like writing an O’Reilly book?&lt;/h2&gt;
&lt;p&gt;I was lucky because I decided to write an intermediate Python book when the language was growing faster than ever, and there were lots of basic books but not so many intermediate ones. So Fluent Python was O’Reilly’s best selling item the month after its release and has been going strong since then. It’s also been translated into 7 languages so far.&lt;/p&gt;
&lt;p&gt;I’ve always been an avid consumer of O’Reilly books, so writing one for them was a dream come true. My editor, Meghan Blanchette, was excellent, and I could not have asked for a better team of tech reviewers: Alex Martelli, Anna Ravenscroft, Lennart Regebro, Leonardo Rochael, and Victor Stinner.&lt;/p&gt;
&lt;p&gt;I also enjoyed writing the book in Asciidoc: I was a fan of RestructuredText, but Asciidoc has friendlier syntax and is better suited for book writing because it was designed to target DocBook, a publishing industry XML standard. You can render Asciidoc to HTML, ePub, PDF and other formats using Python tools, but the best toolset is Asciidoctor, written in Ruby.&lt;/p&gt;
&lt;h2&gt;Let’s go back in time. You and I became really good friends in the late 90’s, when Python was really taking off and you were the key person in Brazil. Can you give us your Python origin story?&lt;/h2&gt;
&lt;p&gt;For me, the best thing about getting involved with Python was making friends like you, Paul. I started doing Web development in 1994, using the most popular language for that purpose at the time: Perl. Before that, I had taught myself object-oriented programming with Smalltalk, but Perl did not have a strong OO culture and class libraries, even after Perl 5 came out.&lt;/p&gt;
&lt;p&gt;In Perl forums, it was common for people to suggest looking at Python code for inspiration about how to design classes in a language that had more similarities with Perl than Smalltalk or C++ did. So I decided to check out that obscure language and fell in love as soon as a read the first chapter of Guido van Rossum’s tutorial. It seemed as elegant as Smalltalk, but with a more readable Algol-like syntax, and it was as practical as Perl.&lt;/p&gt;
&lt;p&gt;In 1998 I started a company focusing on publishing systems for large-scale Web sites. I chose Python as our language, and I chose an even more obscure but incredibly advanced Web framework called Zope as the basis of our systems. Before that year was over, we had deployed a new publishing system for the most important Brazilian IT news portal at the time, and it became one of the first marketing cases for Zope worldwide. You were one of the makers of Zope, and that’s how our friendship started.&lt;/p&gt;
&lt;h2&gt;You historically have done a ton of teaching. What’s unique about Python as a teaching language?&lt;/h2&gt;
&lt;p&gt;Python is an awesome teaching language for several reasons. First, because it is a “real” language &amp;#8212; not a toy &amp;#8212; so people use it in many domains, and there are Python libraries for a lot of different domains. This is the reason why it replaced Scheme as the main language at MIT’s introductory programming classes.&lt;/p&gt;
&lt;p&gt;Second, it is easy to learn because it has a simple syntax, very consistent semantics, and a fail fast philosophy: Python “refuses to guess” so it raises exceptions where other scripting languages fail silently or behave unexpectedly (looking at you, JavaScript, Perl, and PHP).&lt;/p&gt;
&lt;p&gt;Third, Python’s interactive console is a great learning and exploration tool. IPython and Jupyter Notebooks make that even better. Now we have a virtuous cycle: as Python becomes more widely used for teaching, more teaching resources are available for it, like Philip Guo’s &lt;a href=&quot;http://pythontutor.com/&quot;&gt;Python Tutor&lt;/a&gt;, programmable devices like the BBC micro:bit and Adafruit’s CircuitPython products, MOOCs, beginner’s books, academic textbooks, etc.&lt;/p&gt;
&lt;h2&gt;You’ve always been a language junkie and that’s accelerated recently. Based on that, what’s the next big thing for Python, and the next big thing outside of Python?&lt;/h2&gt;
&lt;p&gt;I learned about a dozen languages before Python, but I got a bit lazy to learn others because Python is so practical and fits my brain so well. I was very interested in Ruby around 2006, and a few times I’ve tried hard to like JavaScript, but failed. I became more interested in concurrency because of the success of Node.js. But JavaScript, Python, and Ruby are not ideal to tackle large-scale concurrency challenges. Yes, we can do efficient “IO bound” programming in these languages, but I’ve learned that IO bound systems become CPU bound as they grow: lots of small functions slow down the event loop, which slows down everything else. To deal with this, the language runtime must be able to spread the load over multiple CPU cores, so that no single slow function blocks all others. So I am very interested in languages that were designed from the start for concurrent programming. Right now, I am focusing on Go and Elixir.&lt;/p&gt;
&lt;p&gt;The next big thing for Python seems to be type hinting and all the tooling it will enable. But I would be most excited if we got rid of the infamous GIL (Global Interpreter Lock), or found a way to work around it that’s mostly transparent to the user. However, the GIL makes writing Python extensions in other languages easier than it would be otherwise. And Python owes much of its popularity to the huge number of extensions people have written. So the GIL is like a deal we made with the devil. We had a lot of success&amp;#8230; Can we walk away from that deal?&lt;/p&gt;
&lt;p&gt;After Go and Elixir, I want to dive into Rust, but for a different reason: it seems to be a great language for writing Python extensions. I also want to try Cython. As long as the GIL is around, we might as well enjoy its benefits by writing more awesome extensions.&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/Pycharm/~4/fPOT-6fhQWk&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Mon, 30 Apr 2018 16:15:32 +0000</pubDate>
</item>
<item>
	<title>Trey Hunner: How to have a great first PyCon</title>
	<guid>http://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/</guid>
	<link>http://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/</link>
	<description>&lt;p&gt;You&amp;rsquo;ve decided to invest energy, money, and time away from your home so that you can go to your first PyCon.
Now you want to make sure you spend your time wisely by attending events relevant to you and possibly by forming relations with other PyCon attendees.
But you&amp;rsquo;re (naturally) not an expert conference-goer.
How do you do this?
How do you make the most of your first PyCon?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m an introvert by nature, but I have increased my ability to socialize with others over the years through practice, gamification of social situations, and learning my limits.&lt;/p&gt;

&lt;p&gt;Over the last few years, I&amp;rsquo;ve interviewed many PyCon attendees on &lt;a href=&quot;http://weeklypython.chat&quot;&gt;Weekly Python Chat&lt;/a&gt; and I&amp;rsquo;ve spoken with many first-time PyCon-goers about making the most of PyCon.
It&amp;rsquo;s difficult to describe what PyCon is like to first-time attendees and it&amp;rsquo;s even more difficult to identify how any one person should spend their time at PyCon.
So I&amp;rsquo;m writing this article to compile some of the advice I&amp;rsquo;ve heard from others and to address some of the common fears I hear among first-time PyCon attendees.
Not all of the suggestions below will be right for you, so try to take the advice that works well for you.&lt;/p&gt;

&lt;p&gt;Before you read any further, I have to link you to the &lt;a href=&quot;https://us.pycon.org/2018/events/newcomer_orientation/&quot;&gt;Newcomer Orientation&lt;/a&gt;.
This is a new event hosted by Adrienne Lowe this year.
If this is your first PyCon, I&amp;rsquo;d definitely recommend showing up early to the newcomer orientation and get your footing before the big event starts.&lt;/p&gt;

&lt;h3&gt;Spending your time: which talks should I go to? 🤔&lt;/h3&gt;

&lt;p&gt;The talks at PyCon are typically &lt;strong&gt;uploaded to YouTube within 24 hours after the talk ends&lt;/strong&gt;.
That means that you can spend your evening watching the talks you missed the day before or you can watch the talks when you go home.
I&amp;rsquo;m not suggesting you shouldn&amp;rsquo;t watch talks at PyCon.
I am suggesting that &lt;strong&gt;you don&amp;rsquo;t need to worry about attending every talk&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So how should I decide which talks to go to?
I&amp;rsquo;ve chatted with folks who purposely go exclusively to talks on topics they&amp;rsquo;re not normally interested in.
I also know people who &lt;strong&gt;love going to the keynotes and the lightning talks&lt;/strong&gt; but hang out in the hallway (I&amp;rsquo;ll talk about the hallway track later) or attend open spaces the rest of the time.
I&amp;rsquo;m personally one of those people who &lt;strong&gt;attends very few talks&lt;/strong&gt; and spends a lot of time in open spaces and the in hallway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You cannot and will not do everything there is to do at PyCon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I suggest embracing this idea by chatting with others about things you&amp;rsquo;ve missed out on.
&lt;strong&gt;People often enjoy reflecting on a talk they just watched&lt;/strong&gt; the same way you might want to reflect on a movie.
If you meet someone who just came out of a talk you missed, ask them what it was like and what they learned from it.
They might say &amp;ldquo;eh, it wasn&amp;rsquo;t for me&amp;rdquo; or they might ramble about how exciting it was.&lt;/p&gt;

&lt;p&gt;Consider these things before walking into a talk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Would it be nice to show up to this talk a few minutes early and focus my attention on it?&lt;/li&gt;
&lt;li&gt;Do I want to possibly ask the speaker a question during Q&amp;amp;A?  (tips for Q&amp;amp;A &lt;a href=&quot;https://kev.inburke.com/kevin/how-not-to-ask-questions-at-conference/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://networkingnerd.net/2016/11/09/how-to-ask-a-question-at-a-conference/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Am I having a conversation that I&amp;rsquo;d really like to continue instead of attending this talk?&lt;/li&gt;
&lt;li&gt;Should I take a personal break during this time instead?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remember that PyCon is less about the talks than the discussions that happen around them.
Talks are a wonderful tool to start discussions, but they&amp;rsquo;re not the only way to spark conversation.&lt;/p&gt;

&lt;h3&gt;Open spaces: attend them and consider hosting your own! 👐&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://us.pycon.org/2018/events/open-spaces/&quot;&gt;Open spaces&lt;/a&gt; are &lt;strong&gt;community-run mini meetup events and they aren&amp;rsquo;t decided before PyCon starts&lt;/strong&gt;.
The way it works is that someone puts an index card on the open spaces board to indicate that they&amp;rsquo;re holding an event at a particular time in one of the open spaces rooms that day.
Then others check the open spaces board throughout the day and attend ones they&amp;rsquo;re interested in.&lt;/p&gt;

&lt;p&gt;During every talk at PyCon there are at least 4 other talks happening.
There are also 9 open spaces rooms though.
So you&amp;rsquo;re missing out on over 90% of PyCon at any time!&lt;/p&gt;

&lt;p&gt;When choosing between an open space and a talk, I usually choose the open space.&lt;/p&gt;

&lt;p&gt;There are a few reasons I often pick open spaces over talks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Often the &lt;strong&gt;open spaces are more niche and topical than the talks&lt;/strong&gt;: there are some subjects that exist in open spaces every year but which I&amp;rsquo;ve never seen a talk on&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open spaces are all about interaction and discussion&lt;/strong&gt; whereas talks are a monologue that often evolves into subsequent dialogues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open spaces aren&amp;rsquo;t recorded whereas the talks are&lt;/strong&gt;, meaning you can&amp;rsquo;t really catch up on them later&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If you&amp;rsquo;re looking for kinship and conversation, the open spaces a great place to look.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re hoping to &lt;em&gt;start&lt;/em&gt; a discussion, I&amp;rsquo;d also recommend creating your own open space during PyCon.
The PyCon blog will be publishing a post on open spaces soon which I co-authored.&lt;/p&gt;

&lt;p&gt;Disclaimed after the fact: I&amp;rsquo;m one of the volunteer open spaces co-chairs, so I&amp;rsquo;m biased in my love for them.&lt;/p&gt;

&lt;h3&gt;Feeling like an imposter or an outsider 🌪&lt;/h3&gt;

&lt;p&gt;A common fear when attending PyCon is that people will judge you because you aren&amp;rsquo;t as skilled as they are.&lt;/p&gt;

&lt;p&gt;Maybe you&amp;rsquo;re new to Python and you&amp;rsquo;re worried your peers won&amp;rsquo;t accept you because you think you might be years-off from matching their skills.
Maybe you&amp;rsquo;re &amp;ldquo;not a developer&amp;rdquo; and you&amp;rsquo;re afraid you&amp;rsquo;ll feel like an imposter at PyCon.&lt;/p&gt;

&lt;p&gt;Not feeling like you&amp;rsquo;ll be smart enough or skilled enough to understand the talks and conversations you&amp;rsquo;ll be in is a big and intimidating thought.
If you&amp;rsquo;re afraid of folks misjudging your expertise, it may help to plan out a few techniques for presenting yourself in a way that makes you feel comfortable.&lt;/p&gt;

&lt;p&gt;You might rehearse a few different very &lt;strong&gt;brief elevator pitches&lt;/strong&gt;.
Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m a JavaScript developer here to meet folks in the Python world&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m a new programmer and I&amp;rsquo;m here because I&amp;rsquo;ve been told the Python community was pretty welcoming to newcomers&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t consider myself a developer, but I do write Python code at work to automate things and I&amp;rsquo;m here to learn more&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t write code for work, but I have some side projects that I&amp;rsquo;m using Python for.  So I&amp;rsquo;m here to learn and meet friendly people.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remember that &lt;strong&gt;you do not need to justify your presence at PyCon&lt;/strong&gt;.
If you believe you belong at PyCon, then you do.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in the conversation you&amp;rsquo;re in, others may mirror that interest.
If you&amp;rsquo;re enthusiastic about learning new things, others you meet may mirror that enthusiasm.
I&amp;rsquo;ve witnessed quite a few conversations at PyCon that included phrases like &amp;ldquo;oh you don&amp;rsquo;t know about X?  Cool, essentially it&amp;rsquo;s&amp;hellip;&amp;rdquo;
You&amp;rsquo;ll hopefully find that many of the more long-time PyCon attendees go out of their way to welcome beginners.
This is not a universal phenomenon and even folks with good intentions can alienate those around them.&lt;/p&gt;

&lt;h3&gt;Tips for starting conversation 💬&lt;/h3&gt;

&lt;p&gt;Make sure to treat each person you meet as new.
&lt;strong&gt;Not everyone you meet will be at the conference for the same reasons as you are&lt;/strong&gt;.
Some people write code but don&amp;rsquo;t know Python, some people only using a little bit of Python and don&amp;rsquo;t consider themselves developers, some people don&amp;rsquo;t work in tech, and some people don&amp;rsquo;t write code for work at all and may be considering whether they should make a career transition into tech.
Just as you don&amp;rsquo;t need to justify your presence at PyCon to anyone, no one needs to justify their presence to you.&lt;/p&gt;

&lt;p&gt;I mentioned above that you might want to make an elevator pitch or two for yourself.
You might also want to consider how you&amp;rsquo;ll respond to some of the questions that will come up frequently, like &amp;ldquo;what do you do?&amp;rdquo; or &amp;ldquo;where do you work?&amp;rdquo;.
You will be asked some of the same questions over and over when meeting new people.
&lt;strong&gt;Knowing how you&amp;rsquo;ll respond to common questions will help put your mind at ease when meeting new people&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I also recommend occasionally considering what questions you ask, why you&amp;rsquo;re asking them, and the phrasing you use.
Also notice how others ask questions and consider what questions and phrases seem to put others at ease and lead to interesting conversations.
Conversations often go pretty well if you &lt;strong&gt;ask questions that make others feel comfortable and appreciated&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Tips for breakfast and lunch time 🍽&lt;/h3&gt;

&lt;p&gt;How do lunch and breakfast work?
Can I just sit with anyone or should I choose an empty table?
Are people going to be nice to me?
Do I need to introduce myself when I sit down?&lt;/p&gt;

&lt;p&gt;Meal dynamics are interesting because there&amp;rsquo;s not really a rule book for these social dynamics.
Below is what I&amp;rsquo;ve observed over the years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At lunch and breakfast, you can sit anywhere&lt;/strong&gt;.
Often people will ask &amp;ldquo;is this seat taken&amp;rdquo; when sitting down just in case a group of acquaintances are waiting on another person to join them.
Sometimes when a new person joins your table, a particularly friendly person at the table (if one exists) will introduce themselves to make that newcomer feel welcome.
Often this entails a name, a smile, and a wave or a nod.
Beyond these typical social norms, everything else can differ based on the folks sitting at your table (that includes you!).&lt;/p&gt;

&lt;p&gt;Sometimes a couple people at a table will be very interested to know what brings everyone to the conference and what each person &amp;ldquo;does&amp;rdquo;.
&lt;strong&gt;Meals are a good time to test out your elevator pitch&lt;/strong&gt; when introducing yourself to see how the conversation goes and to verify that it makes you feel comfortable.&lt;/p&gt;

&lt;p&gt;Sometimes people will be more interested in either sitting quietly or talking to a particular person or two with whom they&amp;rsquo;ve found something interesting to discuss.
Personally I often find myself asking others where they&amp;rsquo;re traveling from, whether it&amp;rsquo;s their first year attending, what they&amp;rsquo;ve thought of the conference so far, and &lt;strong&gt;what inspired them to come to PyCon&lt;/strong&gt;.
I tend to leave questions about employment and jobs for later because folks will often bring up their work (if they want to) on their own.&lt;/p&gt;

&lt;h3&gt;The hallway track 👣&lt;/h3&gt;

&lt;p&gt;Something you might consider doing while at PyCon is &lt;strong&gt;taking breaks in the hallway&lt;/strong&gt;.
Sit at a table in the open and if someone asks whether they can sit at your table say something inviting/friendly like &amp;ldquo;sure! I&amp;rsquo;m YOUR_NAME. Nice to meet you new friend!&amp;rdquo; (or just smile and gesture in a friendly way if you&amp;rsquo;re not feeling adventurous in the moment).
Chatting with folks in the hallway in an unstructured way is often referred to as the &lt;a href=&quot;http://www.ericmjl.com/blog/2016/6/3/the-pycon-ers-guide-to-the-hallway-track/&quot;&gt;hallway track&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to joining or starting a table in the hallway, consider identifying groups that have &lt;a href=&quot;http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/&quot;&gt;a PacMan opening&lt;/a&gt; to join and make sure the groups you&amp;rsquo;re in are PacMan-friendly.&lt;/p&gt;

&lt;p&gt;While chatting with new friends, giving one person your full attention in a 5 minute conversation is often more rewarding and memorable than having five 1 minute conversations with different people.
But do keep in mind though that &lt;strong&gt;if you&amp;rsquo;re no longer interested in a conversation or activity, you don&amp;rsquo;t need to keep it going&lt;/strong&gt;.
There are lots of things going on at any one time at PyCon and lots of people there.
It&amp;rsquo;s not unusual to say &amp;ldquo;nice talking to you&amp;rdquo; and leave one conversation to walk off to another conversation or to something else entirely.&lt;/p&gt;

&lt;h3&gt;Don&amp;rsquo;t just follow the rules: be compassionate 💖&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re at a professional event.
You should absolutely try to have fun and derive as much value as you can from PyCon, but you always want to make sure you feel welcome, comfortable, and safe.
Importantly, you should also be mindful to make sure those around you feel the same way.
Please &lt;strong&gt;be cognizant of the preferences of those around you and be respectful of their needs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;PyCon has a &lt;a href=&quot;https://us.pycon.org/2018/about/code-of-conduct/&quot;&gt;code of conduct&lt;/a&gt;.
Read it.
I expect you to go beyond embracing the law of the code of conduct.
I&amp;rsquo;d like you to embrace the spirit of the code of conduct as well.&lt;/p&gt;

&lt;p&gt;When meeting people in general, &lt;strong&gt;make sure to be nice&lt;/strong&gt;.
Don&amp;rsquo;t talk down to people, don&amp;rsquo;t insult people, and don&amp;rsquo;t treat anyone like they don&amp;rsquo;t belong or aren&amp;rsquo;t worthy.
&lt;strong&gt;The Python community prides itself on being nice&lt;/strong&gt; and we expect you to be nice as well.
Be kind, be compassionate, be considerate.&lt;/p&gt;

&lt;p&gt;On that note, you may run into folks who act unkind or make you feel unwelcome at some point.
It&amp;rsquo;s okay to cut and run at any point during any conversation or event.
If you don&amp;rsquo;t feel welcome, I recommend &lt;strong&gt;removing yourself from the space you&amp;rsquo;re in and contacting one of the staff members&lt;/strong&gt; listed on &lt;a href=&quot;https://us.pycon.org/2018/about/code-of-conduct/&quot;&gt;the code of conduct page&lt;/a&gt;.
Even if you just want to say &amp;ldquo;hey something happened that could maybe be avoided in the future,&amp;rdquo; it would be wonderful if you could muster the courage to contact a staff member.
&lt;strong&gt;PyCon tries to improve every year and feedback is the way that happens&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Interacting online during PyCon 🐦&lt;/h3&gt;

&lt;p&gt;After PyCon is over, some people occasionally follow-up with folks they met over email.
Sometimes people will add each other on LinkedIn or Facebook also.
But the means of interaction I&amp;rsquo;ve noticed most is Twitter.
I&amp;rsquo;m unlikely to send most of the people I meet at PyCon an email, but I try to add most of the people I meet to my &lt;a href=&quot;https://twitter.com/treyhunner/lists/pycon-2017/members&quot;&gt;PyCon list&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not completely opposed to it, &lt;strong&gt;I recommend getting a Twitter account to make it easier to passively keep up with folks from PyCon after the conference ends&lt;/strong&gt;.
You don&amp;rsquo;t have to use Twitter all the time to get value from it, you could just use it as a modern day &lt;a href=&quot;https://en.wikipedia.org/wiki/Rolodex&quot;&gt;rolodex&lt;/a&gt; of sorts.
Twitter isn&amp;rsquo;t the only way people stay in touch, but it&amp;rsquo;s an extremely easy passive way to stay in touch.&lt;/p&gt;

&lt;p&gt;If you do get a Twitter account, I recommend adding a saved search for &amp;ldquo;pycon2018 OR pycon&amp;rdquo; to your Twitter app or to &lt;a href=&quot;https://tweetdeck.twitter.com&quot;&gt;TweetDeck&lt;/a&gt; (if you use it) to &lt;strong&gt;follow a bit of the random PyCon-related Twitter chatter during the conference&lt;/strong&gt; and to like/reply/interact with others online.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;strong&gt;people on Twitter will ask if anyone would like to join them for dinner&lt;/strong&gt; and you might decide to reply and say you&amp;rsquo;d like to join.
Sometimes you&amp;rsquo;ll recognize the face or name of someone you met over breakfast or someone you recognize from another part of the internet.
If you&amp;rsquo;re feeling comfortable with it, you could send a tweet to that person to ask if they&amp;rsquo;d like to meet up and chat during one of the breaks.&lt;/p&gt;

&lt;p&gt;However, I keep in mind when you meet people that people are just people.
If you think someone is famous or important or smart, don&amp;rsquo;t treat them like they&amp;rsquo;re a celebrity or like they&amp;rsquo;re superior to you.
&lt;strong&gt;It&amp;rsquo;s wonderful to show appreciation for what someone does&lt;/strong&gt;.
But keep in mind that &lt;strong&gt;most people feel awkward when they feel like they&amp;rsquo;re being put on a pedestal&lt;/strong&gt;.
Treat folks you meet as your equals.&lt;/p&gt;

&lt;h3&gt;Networking isn&amp;rsquo;t a dirty word: it means making friends 👥&lt;/h3&gt;

&lt;p&gt;I hear two opposing concerns sometimes expressed about PyCon:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Isn&amp;rsquo;t everyone here to get a job or hire people?&lt;/li&gt;
&lt;li&gt;Is it acceptable to go to PyCon looking for a job?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;PyCon is a networking event.
That doesn&amp;rsquo;t necessarily mean everyone is there to get a job, but it also definitely doesn&amp;rsquo;t mean it&amp;rsquo;s unacceptable to job-seek at Python.&lt;/p&gt;

&lt;p&gt;There is &lt;strong&gt;no shame in going to PyCon with the goal of getting a new job&lt;/strong&gt;.
Many of the sponsors in the Expo hall are looking to hire new developers and events like the job fair are specifically designed to bring together folks seeking work and folks seeking workers.
But &lt;strong&gt;if you are not at PyCon to get a job or to hire someone else, that&amp;rsquo;s absolutely okay also&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;The focus of PyCon is on &lt;strong&gt;meeting people and sharing experiences&lt;/strong&gt; and that can come in a &lt;em&gt;lot&lt;/em&gt; of different forms.
Sometimes the people you meet will end up being your coworkers one day, sometimes they&amp;rsquo;re folks you&amp;rsquo;d like to keep in touch with, and sometimes they&amp;rsquo;re just a friendly unnamed Pythonistas you once had a good conversation with.&lt;/p&gt;

&lt;p&gt;PyCon is a networking event and networking isn&amp;rsquo;t a dirty word.
&lt;strong&gt;Networking means meeting new people&lt;/strong&gt;.
I&amp;rsquo;ve met a &lt;em&gt;lot&lt;/em&gt; of people at PyCon who I care deeply about.
Some of them I haven&amp;rsquo;t seen in years and only keep in touch with sporadically through social media, some I see once or twice each year, and some I chat with on a weekly basis online.&lt;/p&gt;

&lt;p&gt;Speaking of networking, there&amp;rsquo;s a &lt;a href=&quot;https://us.pycon.org/2018/events/speed_networking/&quot;&gt;Speed Networking&lt;/a&gt; event during the opening reception at PyCon this year that I&amp;rsquo;d recommend going to.&lt;/p&gt;

&lt;p&gt;Whatever your goals are at PyCon, try &lt;strong&gt;savor the experiences you have&lt;/strong&gt; while there.&lt;/p&gt;

&lt;h3&gt;Be prepared to keep in touch 📇&lt;/h3&gt;

&lt;p&gt;How am I supposed to remember all these amazing people I met!
Should I bring business cards and if so how many?
How should I follow up with people after the conference?&lt;/p&gt;

&lt;p&gt;If you have a good conversation with someone, I&amp;rsquo;d recommend exchanging information with them.
I&amp;rsquo;ve seen people &lt;strong&gt;write email addresses on napkins&lt;/strong&gt;.
I&amp;rsquo;ve also frequently seen people exchange business cards or name cards.
Sometimes people simply &lt;strong&gt;write down Twitter handles&lt;/strong&gt; or even ask to take a picture of a face and a badge.
As I noted above, I like to get people&amp;rsquo;s Twitter handles and add them to a &lt;a href=&quot;https://twitter.com/treyhunner/lists/pycon-2017/members&quot;&gt;PyCon list&lt;/a&gt; I maintain for myself.
I also exchange business cards and other forms of contact information.&lt;/p&gt;

&lt;p&gt;Being handed a business card doesn&amp;rsquo;t mean &amp;ldquo;this is a business interaction and we are fancy business people&amp;rdquo;.
If someone hands you a business card, it usually means they appreciated the conversation they had with you and they&amp;rsquo;d like to keep in touch (or at least allow for that possibility).
Sometimes it means they want to hire you, but often they simply want a way to remember your name so they can find you on social media or send you an email later.&lt;/p&gt;

&lt;p&gt;The tricky part is remembering to stay in touch when you go home and remembering which people you had which conversations with.
It&amp;rsquo;s not unusual for people to &lt;strong&gt;take notes on business cards about what they talked about with you and why&lt;/strong&gt;.
I think this is a great strategy for remembering who you&amp;rsquo;re most interested in sending a kind note to after you go home and I wish I remembered to do this more often.&lt;/p&gt;

&lt;p&gt;This blog post on &lt;a href=&quot;http://swombat.com/2011/2/25/kevin-mcdonagh-how-to-attend-a-conference&quot;&gt;how to attend a conference&lt;/a&gt; has recommendations for staying in touch (as well as many other recommendations).&lt;/p&gt;

&lt;h3&gt;Evening events: dinners and board games 🃏&lt;/h3&gt;

&lt;p&gt;What do people do for dinner?
How do they organize?
How late do they stay?
Is there dinner at the conference center, if you don&amp;rsquo;t want to go out?
How do I find people to go to dinner with if I don&amp;rsquo;t know anyone?
Also I know that there are some informal get-togethers at the conference.
How do I propose them?
How do I know what&amp;rsquo;s there?&lt;/p&gt;

&lt;p&gt;One trick that I&amp;rsquo;ve used and I&amp;rsquo;ve seen others use: &lt;strong&gt;make a game of inviting people you don&amp;rsquo;t really know well to dinner&lt;/strong&gt;.
If you&amp;rsquo;re nervous about being with lots of new people, &lt;strong&gt;find a couple familiar people and ask each to invite just 1 person&lt;/strong&gt;.
If you&amp;rsquo;d like to do dinner in a very small group, post on Twitter and say: &amp;ldquo;I&amp;rsquo;m looking for a small dinner group and I&amp;rsquo;m looking for exactly 1 or 2 or 3 (your choice) other people to do dinner with.  Any takers?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Sometimes people make a reservation at a restaurant and hope they can find people to join them.
I&amp;rsquo;m not that gutsy and I usually prefer to gather people until I have a headcount and then call a nearby restaurant to ask if a reservation is needed.
During your first conference I&amp;rsquo;m recommend &lt;strong&gt;walking up to a group of folks and asking &amp;ldquo;does anyone have dinner plans?&amp;rdquo;&lt;/strong&gt;
Often the response will be &amp;ldquo;we&amp;rsquo;re trying to figure that out now, want to join us?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;As far as events in the evening besides dinner go, there&amp;rsquo;s a variety of options usually.
Some people go out drinking.
I don&amp;rsquo;t drink, so I don&amp;rsquo;t do this but I&amp;rsquo;ve also heard the recommendation from drinkers that &lt;strong&gt;it&amp;rsquo;s a very bad idea to drink heavily during a conference&lt;/strong&gt;.
You&amp;rsquo;re with people you don&amp;rsquo;t know in a new community: don&amp;rsquo;t increase the chance that you might alienate someone by doing something you regret.
I&amp;rsquo;m very biased here, but I&amp;rsquo;d drinking very moderately if you drink at all during PyCon.&lt;/p&gt;

&lt;p&gt;One thing you&amp;rsquo;ll likely see a lot of during PyCon is board games.
Folks often play board games in the hotel lobbies, in board game bars, and even in the open spaces!
PyCon&amp;rsquo;s open spaces usually involve some evening time for after hour events and board games are frequently one of those events.
There&amp;rsquo;s usually &lt;strong&gt;at least one night with a semi-official board game open spaces&lt;/strong&gt; event, but there are often others that appear.
You could even put your own board game open space event on the board!&lt;/p&gt;

&lt;p&gt;I can&amp;rsquo;t mention board games without mentioning my absolute favorite conference ice breaker: &lt;strong&gt;the cabo card game&lt;/strong&gt;.
I&amp;rsquo;ve played Cabo at &lt;a href=&quot;https://twitter.com/treyhunner/status/573027732902133760&quot;&gt;most&lt;/a&gt; &lt;a href=&quot;https://twitter.com/treyhunner/status/587086868396822528&quot;&gt;tech&lt;/a&gt; &lt;a href=&quot;https://twitter.com/algosuna/status/641421944005378048&quot;&gt;conferences&lt;/a&gt; &lt;a href=&quot;https://twitter.com/treyhunner/status/746454264495513601&quot;&gt;I&amp;rsquo;ve&lt;/a&gt; &lt;a href=&quot;https://twitter.com/treyhunner/status/755887571264212993&quot;&gt;been&lt;/a&gt; &lt;a href=&quot;https://twitter.com/treyhunner/status/897971022334382080&quot;&gt;to&lt;/a&gt;.
I love Cabo because it only requires a 52 card deck and using the phrase &amp;ldquo;want to learn a 20 minute card game that I guarantee you&amp;rsquo;ve never heard of&amp;rdquo; seems to allow people to let their guard down and meet new people (not everyone says yes, but many people do).
If you&amp;rsquo;d like to try playing Cabo yourself, you can read my blog post on &lt;a href=&quot;http://treyhunner.com/2015/06/cabo-card-game/&quot;&gt;the rules to the Cabo card game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing I love about nearly all forms of games is that your technical interests or expertise don&amp;rsquo;t usually matter when you&amp;rsquo;re playing a game.
You can bond with people without have any deep conversation at all.
I&amp;rsquo;ve met people the day after playing a long game and &lt;strong&gt;felt like I already knew them even though I didn&amp;rsquo;t even know their name yet&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Volunteering 💝&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re the type of person who derives comfort from understanding and being part of the inner workings of a community event, I recommend &lt;a href=&quot;https://us.pycon.org/2018/about/volunteers/&quot;&gt;volunteering to help out while at PyCon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might think it&amp;rsquo;s premature to volunteer during your first PyCon and for some roles, it likely is.
You probably shouldn&amp;rsquo;t volunteer to be a session chair during your first PyCon for example because that&amp;rsquo;s a big role.
But you could absolutely be part of the &lt;a href=&quot;https://us.pycon.org/2018/about/volunteers/#swag&quot;&gt;swag bag stuffing&lt;/a&gt;, which is a way to see lots friendly of faces while being a smiling cog in a bag-stuff assembly line.&lt;/p&gt;

&lt;p&gt;You could also volunteer to help &lt;a href=&quot;https://us.pycon.org/2018/about/volunteers/#swag_dist&quot;&gt;hand out swag bags&lt;/a&gt;, act as a friendly &lt;a href=&quot;https://us.pycon.org/2018/about/volunteers/#tutorials&quot;&gt;greeter for folks coming into tutorials&lt;/a&gt;, or &lt;a href=&quot;https://us.pycon.org/2018/about/volunteers/#registration&quot;&gt;help out at the registration desk&lt;/a&gt;.
These might sound like scary tasks, but from my experience &lt;strong&gt;the folks who coordinate volunteers are happy to answer questions and prepare you for your role&lt;/strong&gt; so that you feel comfortable doing the job you&amp;rsquo;ve signed up for.
All three of those tasks are ways to practice being a cheerful and empathetic face, which will help other first-time attendees to feel comfortable too.&lt;/p&gt;

&lt;p&gt;After volunteering, people may occasionally meet you in the hall and wonder why they&amp;rsquo;re already familiar with your friendly face.
It&amp;rsquo;s because you handed them their badge or checked their name off a list!
Also volunteering can give you glimpse behind the scenes of PyCon and &lt;strong&gt;make things feel a little less scary and official&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you are planning to volunteer though, make sure you block that time off on your calendar and that you show up.
&lt;strong&gt;Don&amp;rsquo;t miss your volunteering time slots and leave the staff scrambling to find someone to fill in at the last minute&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If volunteering to be a small part of the event inner-workings isn&amp;rsquo;t your thing, don&amp;rsquo;t worry.
&lt;strong&gt;There are lots of great ways to spend your time while at PyCon&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;Give a lightning talk ⚡&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re feeling particularly bold one day, you could sign up on the &lt;a href=&quot;https://us.pycon.org/2018/events/lightning/talks/&quot;&gt;lightning talk board&lt;/a&gt; to give a 5 minute lightning talk on a topic of your choosing.
This is another excuse for people to talk to you.&lt;/p&gt;

&lt;p&gt;I gave my first conference lightning talk &lt;a href=&quot;https://us.pycon.org/2018/about/volunteers/#registration&quot;&gt;at DjangoCon 2015&lt;/a&gt;, during which I compared modern JavaScript to Python.
A few people I&amp;rsquo;d never met started a conversation with me at a bar afterward by saying &amp;ldquo;I liked your lightning talk.&amp;rdquo;
Lightning talks can act as an ice breaker.
If you give a talk to a giant room of people, you&amp;rsquo;ve given everyone in that room at least a reason to talk to you.&lt;/p&gt;

&lt;p&gt;If you do give a lightning talk, &lt;strong&gt;make sure it&amp;rsquo;s less than 5 minutes&lt;/strong&gt;.
You do not want to run over time in a lightning talk.
The shorter and more compact, the better.&lt;/p&gt;

&lt;h3&gt;Take care of yourself 💗&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s so many people.
What do I do if I get overwhelmed?&lt;/p&gt;

&lt;p&gt;While at PyCon, you&amp;rsquo;ll want to &lt;strong&gt;make sure you pace yourself&lt;/strong&gt; and that you &lt;strong&gt;find a way to slow down and recharge&lt;/strong&gt; when needed.
If you&amp;rsquo;re an introvert, your laptop&amp;rsquo;s batteries will likely last longer than yours before needing a recharge at PyCon.
At least once a day, I&amp;rsquo;d recommend finding a quiet place to sit, breathe deeply, think about your day, and meditate.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t expect yourself to be able to wake up, head to the conference venue, do things at every moment during the day, and then go out with folks for dinner and more conversation in the evening.
If you know your limits, respect them.
&lt;strong&gt;Push yourself outside of your comfort zone, but don&amp;rsquo;t stretch your boundaries too far&lt;/strong&gt;.
Make sure to check in with yourself and take breaks to assess whether you need mid-day a nap or a bit of quiet alone time between lunch and dinner.
&lt;strong&gt;You cannot be &amp;ldquo;on&amp;rdquo; at every moment&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Tips from others 😄&lt;/h3&gt;

&lt;p&gt;I can&amp;rsquo;t write a guide on attending PyCon without referencing a couple other wonderful guides that have been written on this topic.&lt;/p&gt;

&lt;p&gt;Danny Greenfeld&amp;rsquo;s &lt;a href=&quot;https://www.pydanny.com/beginners-guide-pycon-2014.html&quot;&gt;Beginner&amp;rsquo;s Guide to PyCon 2015&lt;/a&gt; is another great guide to PyCon, with lots of tips on how to make the most of PyCon.
It&amp;rsquo;s much more compact than my post here, so it&amp;rsquo;s a quick and dense read.&lt;/p&gt;

&lt;p&gt;Al Sweigart also talks quite a bit about his strategies for meeting new people at PyCon in his &lt;a href=&quot;https://automatetheboringstuff.com/how-to-do-pycon.html&quot;&gt;How to Do PyCon&lt;/a&gt; post.
Al is also an introvert, but he&amp;rsquo;s very good at gamifying socializing with others.&lt;/p&gt;

&lt;p&gt;I also &lt;strong&gt;highly recommend asking questions&lt;/strong&gt; to staff members, friendly-looking volunteers, and people with silly hats (some people use hats to indicate that they&amp;rsquo;re approachable).
Different PyCon attendees will have different recommendations for how to make the most of PyCon without getting overwhelmed.&lt;/p&gt;

&lt;p&gt;Also, if you see me in the hallway at PyCon (I have a face that looks like me and will like have a &amp;ldquo;Trey Hunner&amp;rdquo; name badge on), say hi and let me know you read this article! 😄&lt;/p&gt;

&lt;p&gt;I hope you have a lovely PyCon!&lt;/p&gt;</description>
	<pubDate>Mon, 30 Apr 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: Python Exceptions: An Introduction</title>
	<guid>https://realpython.com/python-exceptions/</guid>
	<link>https://realpython.com/python-exceptions/</link>
	<description>&lt;p&gt;A Python program terminates as soon as it encounters an error. In Python, an error can be a syntax error or an exception. In this article, you will see what an exception is and how it differs from a syntax error. After that, you will learn about raising exceptions and making assertions. Then, you&amp;rsquo;ll finish with a demonstration of the try and except block.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/intro.8915db1758d8.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/intro.8915db1758d8.png&quot; width=&quot;1394&quot; height=&quot;411&quot; alt=&quot;intro_exceptions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Free PDF Download:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Python 3 Cheat Sheet&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;exceptions-versus-syntax-errors&quot;&gt;Exceptions versus Syntax Errors&lt;/h2&gt;
&lt;p&gt;Syntax errors occur when the parser detects an incorrect statement. Observe the following example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print( 0 / 0 ))&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;SyntaxError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;invalid syntax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The arrow indicates where the parser ran into the &lt;strong&gt;syntax error&lt;/strong&gt;. In this example, there was one bracket too many. Remove it and run your code again:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print( 0 / 0)&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;ZeroDivisionError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;integer division or modulo by zero&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This time, you ran into an &lt;strong&gt;exception error&lt;/strong&gt;. This type of error occurs whenever syntactically correct Python code results in an error. The last line of the message indicated what type of exception error you ran into.&lt;/p&gt;
&lt;p&gt;Instead of showing the message &lt;code&gt;exception error&lt;/code&gt;, Python details what type of exception error was encountered. In this case, it was a &lt;code&gt;ZeroDivisionError&lt;/code&gt;. Python comes with &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html&quot;&gt;various built-in exceptions&lt;/a&gt; as well as the possibility to create self-defined exceptions.&lt;/p&gt;
&lt;h2 id=&quot;raising-an-exception&quot;&gt;Raising an Exception&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;raise&lt;/code&gt; to throw an exception if a condition occurs. The statement can be complemented with a custom exception.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/raise.3931e8819e08.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/raise.3931e8819e08.png&quot; width=&quot;1394&quot; height=&quot;311&quot; alt=&quot;exceptions_raise&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to throw an error when a certain condition occurs using &lt;code&gt;raise&lt;/code&gt;, you could go about it like this:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x should not exceed 5. The value of x was: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run this code, the output will be the following:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;input&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;Exception&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;x should not exceed 5. The value of x was: 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program comes to a halt and displays our exception to screen, offering clues about what went wrong.&lt;/p&gt;
&lt;h2 id=&quot;the-assertionerror-exception&quot;&gt;The &lt;code&gt;AssertionError&lt;/code&gt; Exception&lt;/h2&gt;
&lt;p&gt;Instead of waiting for a program to crash midway, you can also start by &lt;a href=&quot;https://dbader.org/blog/python-assert-tutorial&quot;&gt;making an assertion in Python&lt;/a&gt;. We &lt;code&gt;assert&lt;/code&gt; that a certain condition is met. If this condition turns out to be &lt;code&gt;True&lt;/code&gt;, then that is excellent! The program can continue. If the condition turns out to be &lt;code&gt;False&lt;/code&gt;, you can have the program throw an &lt;code&gt;AssertionError&lt;/code&gt; exception.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/assert.f6d344f0c0b4.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/assert.f6d344f0c0b4.png&quot; width=&quot;1394&quot; height=&quot;411&quot; alt=&quot;assert&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have a look at the following example, where it is asserted that the code will be executed on a Linux system:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'linux'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This code runs on Linux only.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you run this code on a Linux machine, the assertion passes. If you were to run this code on a Windows machine, the outcome of the assertion would be &lt;code&gt;False&lt;/code&gt; and the result would be the following:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;&amp;lt;input&amp;gt;&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;AssertionError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;This code runs on Linux only.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, throwing an &lt;code&gt;AssertionError&lt;/code&gt; exception is the last thing that the program will do. The program will come to halt and will not continue. What if that is not what you want?&lt;/p&gt;
&lt;h2 id=&quot;the-try-and-except-block-handling-exceptions&quot;&gt;The &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; Block: Handling Exceptions&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; block in Python is used to catch and handle exceptions. Python executes code following the &lt;code&gt;try&lt;/code&gt; statement as a &amp;ldquo;normal&amp;rdquo; part of the program. The code that follows the &lt;code&gt;except&lt;/code&gt; statement is the program&amp;rsquo;s response to any exceptions in the preceding &lt;code&gt;try&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/try_except.c94eabed2c59.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/try_except.c94eabed2c59.png&quot; width=&quot;1394&quot; height=&quot;556&quot; alt=&quot;try and except&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you saw earlier, when syntactically correct code runs into an error, Python will throw an exception error. This exception error will crash the program if it is unhandled. The &lt;code&gt;except&lt;/code&gt; clause determines how your program responds to exceptions.&lt;/p&gt;
&lt;p&gt;The following function can help you understand the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; block:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'linux'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Function can only run on Linux systems.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Doing something.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;linux_interaction()&lt;/code&gt; can only run on a Linux system. The &lt;code&gt;assert&lt;/code&gt; in this function will throw an &lt;code&gt;AssertionError&lt;/code&gt; exception if you call it on an operating system other then Linux.&lt;/p&gt;
&lt;p&gt;You can give the function a &lt;code&gt;try&lt;/code&gt; using the following code:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The way you handled the error here is by handing out a &lt;code&gt;pass&lt;/code&gt;. If you were to run this code on a Windows machine, you would get the following output:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You got nothing. The good thing here is that the program did not crash. But it would be nice to see if some type of exception occurred whenever you ran your code. To this end, you can change the &lt;code&gt;pass&lt;/code&gt; into something that would generate an informative message, like so:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Linux function was not executed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Execute this code on a Windows machine:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Linux function was not executed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When an exception occurs in a program running this function, the program will continue as well as inform you about the fact that the function call was not successful.&lt;/p&gt;
&lt;p&gt;What you did not get to see was the type of error that was thrown as a result of the function call. In order to see exactly what went wrong, you would need to catch the error that the function threw.&lt;/p&gt;
&lt;p&gt;The following code is an example where you capture the &lt;code&gt;AssertionError&lt;/code&gt; and output that message to screen:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AssertionError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The linux_interaction() function was not executed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running this function on a Windows machine outputs the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Function can only run on Linux systems.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;The linux_interaction() function was not executed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first message is the &lt;code&gt;AssertionError&lt;/code&gt;, informing you that the function can only be executed on a Linux machine. The second message tells you which function was not executed.&lt;/p&gt;
&lt;p&gt;In the previous example, you called a function that you wrote yourself. When you executed the function, you caught the &lt;code&gt;AssertionError&lt;/code&gt; exception and printed it to screen.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another example where you open a file and use a built-in exception:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Could not open file.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If &lt;em&gt;file.log&lt;/em&gt; does not exist, this block of code will output the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Could not open file.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an informative message, and our program will still continue to run. In the &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html&quot;&gt;Python docs&lt;/a&gt;, you can see that there are a lot of built-in exceptions that you can use here. One exception described on that page is the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception &lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Raised when a file or directory is requested but doesn’t exist. Corresponds to errno ENOENT.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To catch this type of exception and print it to screen, you could use the following code:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileNotFoundError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, if &lt;em&gt;file.log&lt;/em&gt; does not exist, the output will be the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[Errno 2] No such file or directory: 'file.log'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can have more than one function call in your &lt;code&gt;try&lt;/code&gt; clause and anticipate catching various exceptions. A thing to note here is that the code in the &lt;code&gt;try&lt;/code&gt; clause will stop as soon as an exception is encountered.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot;&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Catching &lt;code&gt;Exception&lt;/code&gt; hides all errors&amp;hellip;even those which are completely unexpected. This is why you should avoid bare &lt;code&gt;except&lt;/code&gt; clauses in your Python programs. Instead, you&amp;rsquo;ll want to refer to &lt;em&gt;specific exception classes&lt;/em&gt; you want to catch and handle. You can learn more about why this is a good idea &lt;a href=&quot;https://realpython.com/the-most-diabolical-python-antipattern/&quot;&gt;in this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Look at the following code. Here, you first call the &lt;code&gt;linux_interaction()&lt;/code&gt; function and then try to open a file:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileNotFoundError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AssertionError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Linux linux_interaction() function was not executed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the file does not exist, running this code on a Windows machine will output the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Function can only run on Linux systems.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Linux linux_interaction() function was not executed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inside the &lt;code&gt;try&lt;/code&gt; clause, you ran into an exception immediately and did not get to the part where you attempt to open &lt;em&gt;file.log&lt;/em&gt;. Now look at what happens when you run the code on a Linux machine:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[Errno 2] No such file or directory: 'file.log'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here are the key takeaways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;try&lt;/code&gt; clause is executed up until the point where the first exception is encountered.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;except&lt;/code&gt; clause, or the exception handler, you determine how the program responds to the exception.&lt;/li&gt;
&lt;li&gt;You can anticipate multiple exceptions and differentiate how the program should respond to them.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realpython.com/the-most-diabolical-python-antipattern/&quot;&gt;Avoid using bare &lt;code&gt;except&lt;/code&gt; clauses.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-else-clause&quot;&gt;The &lt;code&gt;else&lt;/code&gt; Clause&lt;/h2&gt;
&lt;p&gt;In Python, using the &lt;code&gt;else&lt;/code&gt; statement, you can instruct a program to execute a certain block of code only in the absence of exceptions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/try_except_else.703aaeeb63d3.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/try_except_else.703aaeeb63d3.png&quot; width=&quot;1394&quot; height=&quot;783&quot; alt=&quot;try except else&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Look at the following example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AssertionError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Executing the else clause.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you were to run this code on a Linux system, the output would be the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Doing something.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Executing the else clause.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because the program did not run into any exceptions, the &lt;code&gt;else&lt;/code&gt; clause was executed.&lt;/p&gt;
&lt;p&gt;You can also &lt;code&gt;try&lt;/code&gt; to run code inside the &lt;code&gt;else&lt;/code&gt; clause and catch possible exceptions there as well:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AssertionError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileNotFoundError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you were to execute this code on a Linux machine, you would get the following result:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Doing something.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[Errno 2] No such file or directory: 'file.log'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From the output, you can see that the &lt;code&gt;linux_interaction()&lt;/code&gt; function ran. Because no exceptions were encountered, an attempt to open &lt;em&gt;file.log&lt;/em&gt; was made. That file did not exist, and instead of opening the file, you caught the &lt;code&gt;FileNotFoundError&lt;/code&gt; exception.&lt;/p&gt;
&lt;h2 id=&quot;cleaning-up-after-using-finally&quot;&gt;Cleaning Up After Using &lt;code&gt;finally&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Imagine that you always had to implement some sort of action to clean up after executing your code.  Python enables you to do so using the &lt;code&gt;finally&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://files.realpython.com/media/try_except_else_finally.a7fac6c36c55.png&quot;&gt;&lt;img class=&quot;img-fluid mb-3  mx-auto d-block&quot; src=&quot;https://files.realpython.com/media/try_except_else_finally.a7fac6c36c55.png&quot; width=&quot;1394&quot; height=&quot;1000&quot; alt=&quot;try except else finally&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have a look at the following example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linux_interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;AssertionError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'file.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;read_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileNotFoundError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fnf_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Cleaning up, irrespective of any exceptions.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the previous code, everything in the &lt;code&gt;finally&lt;/code&gt; clause will be executed. It does not matter if you encounter an exception somewhere in the &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt; clauses. Running the previous code on a Windows machine would output the following:&lt;/p&gt;
&lt;div class=&quot;highlight sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Function can only run on Linux systems.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Cleaning up, irrespective of any exceptions.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing Up&lt;/h2&gt;
&lt;p&gt;After seeing the difference between syntax errors and exceptions, you learned about various ways to raise, catch, and handle exceptions in Python. In this article, you saw the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;raise&lt;/code&gt; allows you to throw an exception at any time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt; enables you to verify if a certain condition is met and throw an exception if it isn’t.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;try&lt;/code&gt; clause, all statements are executed until an exception is encountered.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;except&lt;/code&gt; is used to catch and handle the exception(s) that are encountered in the try clause.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt; lets you code sections that should run only when no exceptions are encountered in the try clause.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt; enables you to execute sections of code that should always run, with or without any previously encountered exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Free PDF Download:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Python 3 Cheat Sheet&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Hopefully, this article helped you understand the basic tools that Python has to offer when dealing with exceptions.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 30 Apr 2018 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: PyDev of the Week: John Reese</title>
	<guid>http://www.blog.pythonlibrary.org/2018/04/30/pydev-of-the-week-john-reese/</guid>
	<link>http://www.blog.pythonlibrary.org/2018/04/30/pydev-of-the-week-john-reese/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;This week we welcome John Reese (&lt;a href=&quot;https://twitter.com/n7cmdr/&quot;&gt;@n7cmdr&lt;/a&gt;) as our PyDev of the Week. John works for Facebook and has been using Python for many years. He has a &lt;a href=&quot;https://noswap.com/&quot;&gt;blog,&lt;/a&gt; but it hasn&amp;#8217;t been updated in a while. If you&amp;#8217;d like to see what he&amp;#8217;s up to in open source land, then check out his &lt;a href=&quot;https://github.com/jreese/&quot;&gt;Github profile&lt;/a&gt;. Let&amp;#8217;s spend a few moments getting to know him better!&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-medium wp-image-7248&quot; src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2018/04/john_reese-288x300.jpeg&quot; alt=&quot;&quot; width=&quot;288&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Can you tell us a little about yourself (hobbies, education, etc):&lt;/h3&gt;
&lt;p&gt;I like to describe myself as a Software Engineer, video game enthusiast, and virtual astronaut &lt;img class=&quot;emoji&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f468-1f680.png&quot; alt=&quot;man_astronaut&quot; width=&quot;20&quot; height=&quot;20&quot; /&gt;. I enjoy dabbling in photography, astronomy, and music, but I&amp;#8217;m most passionate about technology and games. My favorite game series is Mass Effect, but I&amp;#8217;ve spent more hours in Kerbal Space Program than any other title.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been writing software for the large majority of my life. It started when I was six, using a 286 with MS-DOS, writing batch scripts to create simple menus or boot disks for PC games of the era (640KB was never enough &lt;img class=&quot;emoji&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f629.png&quot; alt=&quot;weary&quot; width=&quot;20&quot; height=&quot;20&quot; /&gt;). In grade school, I started writing my own &amp;#8220;games&amp;#8221; in BASIC for the PC, and by early high school, I was using PHP to build my own websites and toying with C++ to write basic mods for games.&lt;/p&gt;
&lt;p&gt;I went to university at the Rochester Institute of Technology in upstate New York, and graduated with a Software Engineering degree. Since then, I’ve worked in open source software, telecommunications, network security, and game development, mostly writing backend services or automation systems in Python.&lt;/p&gt;
&lt;p&gt;I now live in the San Francisco bay area with my amazing wife&lt;img src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f469-1f3fb-200d-1f3a4.png&quot; alt=&quot;👩🏻‍🎤&quot; class=&quot;wp-smiley&quot; /&gt; and two cats, and I work as a Production Engineer for Facebook. I’m a member of a storage team responsible for maintaining and replicating arbitrary binary data, including photos and videos for Facebook, Instagram, and WhatsApp, as well as games for the Oculus VR headsets. I&amp;#8217;ve built a large variety of monitoring and automation systems in Python to audit the health of our service, as well as to coordinate data migrations to ensure durability and availability of data in the face of hardware failures and network outages.&lt;span id=&quot;more-7246&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a id=&quot;user-content-why-did-you-start-using-python&quot; class=&quot;anchor&quot; href=&quot;https://gist.github.com/jreese/c988276a4ea81109b33aec6010615345#why-did-you-start-using-python&quot;&gt;&lt;/a&gt;Why did you start using Python?&lt;/h3&gt;
&lt;p&gt;My first use of Python was late in university, while working at a local telecom hardware company. I was adding new features to the open source PHP bug tracker &lt;a href=&quot;https://mantisbt.org/&quot; rel=&quot;nofollow&quot;&gt;Mantis BT&lt;/a&gt;, which used a handful of Python scripts to automate things like release builds. After getting past the controversial whitespace, I fell in love with the syntax and the vast standard library. From that moment onward, all other languages immediately felt arcane and verbose, and I was destined to walk the path of enlightenment!&lt;/p&gt;
&lt;h3&gt;&lt;a id=&quot;user-content-what-other-programming-languages-do-you-know-and-which-is-your-favorite&quot; class=&quot;anchor&quot; href=&quot;https://gist.github.com/jreese/c988276a4ea81109b33aec6010615345#what-other-programming-languages-do-you-know-and-which-is-your-favorite&quot;&gt;&lt;/a&gt;What other programming languages do you know and which is your favorite?&lt;/h3&gt;
&lt;p&gt;Python is a very opinionated language, and I strongly agree with most of those opinions, so it&amp;#8217;s easily my favorite language! Especially with the addition of type annotations and asyncio, there&amp;#8217;s little reason for me to choose another language outside of performance-critical applications. That said, I&amp;#8217;ve toyed with countless languages over the years; most of them frustrate me (looking at you, PHP) but there&amp;#8217;s a small handful that I could live with if Python disappeared tomorrow. Swift and C# are both great languages with excellent features and good-enough syntax, and they continue improving at a rapid pace. C++ is always a strong alternative for systems programming, although one of my least favorites for syntax, and I&amp;#8217;m sure it will continue to fill its role for a long time into the future.&lt;/p&gt;
&lt;h3&gt;&lt;a id=&quot;user-content-what-projects-are-you-working-on-now&quot; class=&quot;anchor&quot; href=&quot;https://gist.github.com/jreese/c988276a4ea81109b33aec6010615345#what-projects-are-you-working-on-now&quot;&gt;&lt;/a&gt;What projects are you working on now?&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m currently &lt;a href=&quot;https://us.pycon.org/2018/schedule/presentation/103/&quot; rel=&quot;nofollow&quot;&gt;preparing a talk for PyCon 2018&lt;/a&gt; on using asyncio with multiprocessing for highly-parallel monitoring and/or scraping workloads. To go with this talk, I&amp;#8217;m working on some simple example code that I hope to publish on Github. This will be my first major conference talk, so I&amp;#8217;m both excited and absolutely terrified! &lt;img class=&quot;emoji&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f605.png&quot; alt=&quot;sweat_smile&quot; width=&quot;20&quot; height=&quot;20&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Beyond PyCon, my latest public project is an asyncio wrapper around the sqlite3 module, &lt;a href=&quot;https://github.com/jreese/aiosqlite&quot;&gt;aiosqlite&lt;/a&gt;. It allows async code to continue running while database queries or transactions run on a separate thread. This was useful for me in building standalone applications with asyncio that needed a database, but did not require a dedicated server like MySQL.&lt;/p&gt;
&lt;h3&gt;&lt;a id=&quot;user-content-which-python-libraries-are-your-favorite-core-or-3rd-party&quot; class=&quot;anchor&quot; href=&quot;https://gist.github.com/jreese/c988276a4ea81109b33aec6010615345#which-python-libraries-are-your-favorite-core-or-3rd-party&quot;&gt;&lt;/a&gt;Which Python libraries are your favorite (core or 3rd party)?&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;m a big proponent of setting high standards for code quality and maintainability, regardless of how trivial or important a project is. Given that, I&amp;#8217;m really fond of the new data types and features in the typing module, which make it really easy to create well-typed data structures and modules. Combined with &lt;a href=&quot;http://mypy-lang.org/&quot; rel=&quot;nofollow&quot;&gt;mypy&lt;/a&gt;, &lt;a href=&quot;https://www.pylint.org/&quot; rel=&quot;nofollow&quot;&gt;pylint&lt;/a&gt;, &lt;a href=&quot;https://github.com/PyCQA/flake8-bugbear&quot;&gt;bugbear&lt;/a&gt;, and the excellent new auto-formatter &lt;a href=&quot;https://github.com/ambv/black&quot;&gt;black&lt;/a&gt;, it&amp;#8217;s never been easier to write clean and robust software in Python.&lt;/p&gt;
&lt;h3&gt;&lt;a id=&quot;user-content-is-there-anything-else-youd-like-to-say&quot; class=&quot;anchor&quot; href=&quot;https://gist.github.com/jreese/c988276a4ea81109b33aec6010615345#is-there-anything-else-youd-like-to-say&quot;&gt;&lt;/a&gt;Is there anything else you’d like to say?&lt;/h3&gt;
&lt;p&gt;Diversity in technology is an important issue to me. There’s always more that we can do to foster and promote equal representation of all races and genders in our industry. In that regard, I would like to give a shout out to the excellent &lt;a href=&quot;http://appcamp4girls.com/&quot; rel=&quot;nofollow&quot;&gt;App Camp for Girls&lt;/a&gt; project:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;App Camp for Girls is a one-week summer day program where girls, transgender &amp;amp; gender non-conforming youth can put their creative powers to work designing and building apps. They also learn about the business of software while being inspired by role models in the industry.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Please consider supporting them if at all possible.&lt;/p&gt;
&lt;h3&gt;Thanks for doing the interview!&lt;/h3&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F04%2F30%2Fpydev-of-the-week-john-reese%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20John%20Reese&quot; title=&quot;Facebook&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F04%2F30%2Fpydev-of-the-week-john-reese%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20John%20Reese&quot; title=&quot;Twitter&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_google_plus&quot; href=&quot;https://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F04%2F30%2Fpydev-of-the-week-john-reese%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20John%20Reese&quot; title=&quot;Google+&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F04%2F30%2Fpydev-of-the-week-john-reese%2F&amp;title=PyDev%20of%20the%20Week%3A%20John%20Reese&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 30 Apr 2018 12:30:27 +0000</pubDate>
</item>
<item>
	<title>Chris Moffitt: Choosing a Python Visualization Tool</title>
	<guid>http://pbpython.com/python-vis-flowchart.html</guid>
	<link>http://pbpython.com/python-vis-flowchart.html</link>
	<description>&lt;div class=&quot;section&quot; id=&quot;introduction&quot;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This brief article introduces a flowchart that shows how to select a python visualization
tool for the job at hand. The criteria for choosing the tools is weighted more towards
the “common” tools out there that have been in use for several years. There may
be some debate about some of the recommendations but I believe this should be helpful
for someone that is new to the python visualization landscape and trying to make
a decision about where to invest their time to learn how to use one of these libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;assumptions-and-prior-art&quot;&gt;
&lt;h2&gt;Assumptions and Prior Art&lt;/h2&gt;
&lt;p&gt;The most basic assumption is that the data you wish to plot is in a pandas dataframe.
My second assumption is that these plots would be used to visualize data as part of
Exploratory Data Analysis (&lt;span class=&quot;caps&quot;&gt;EDA&lt;/span&gt;). The goal is to quickly create meaningful plots in
order to understand the data. In some instances, the &lt;span class=&quot;caps&quot;&gt;EDA&lt;/span&gt; could turn into an interactive
plotting application which I briefly discuss later in the article.&lt;/p&gt;
&lt;p&gt;There are a couple of really good resources out there that cover this topic in more detail:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://dsaber.com/2016/10/02/a-dramatic-tour-through-pythons-data-visualization-landscape-including-ggplot-and-altair/&quot;&gt;Dramatic Tour of Python’s Visualization Landscape&lt;/a&gt; by Dan Saber&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pythonplot.com/&quot;&gt;Python Plotting for &lt;span class=&quot;caps&quot;&gt;EDA&lt;/span&gt;&lt;/a&gt; by Tim Hopper&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pbpython.com/visualization-tools-1.html&quot;&gt;Overview of Python Visualization Tools&lt;/a&gt; from this blog&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-chart&quot;&gt;
&lt;h2&gt;The Chart&lt;/h2&gt;
&lt;p&gt;Here is the flow chart. I will walk through the logic below.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;Python Visualization Tool Chooser&quot; src=&quot;http://pbpython.com/images/Python-plot-tools.png&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;a-quick-tour-of-the-decision-points&quot;&gt;
&lt;h2&gt;A Quick Tour of The Decision Points&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;use-ggplot2-syntax&quot;&gt;
&lt;h3&gt;Use ggplot2 syntax?&lt;/h3&gt;
&lt;p&gt;ggplot2 is a plotting system for R and many newer python users that are more familiar with it, are
looking for something in python that matches the syntax and power of ggplot2. There have
been a few fits and starts in this space, but it looks like &lt;a class=&quot;reference external&quot; href=&quot;https://plotnine.readthedocs.io/en/stable/&quot;&gt;plotnine&lt;/a&gt; is being
actively maintained and supports much of the ggplot2 syntax. If you are interested
in porting your ggplot2 knowledge to python, I would encourage you to check it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;try-something-new&quot;&gt;
&lt;h3&gt;Try something new?&lt;/h3&gt;
&lt;p&gt;The python landscape is ever-changing and sometimes libraries will pop up and slowly
die. Fortunately, I do not think this will be the case with &lt;a class=&quot;reference external&quot; href=&quot;https://altair-viz.github.io/&quot;&gt;Altair&lt;/a&gt;. As of this blog post, it
is moving close to a 2.0 release. The current release candidate look really impressive
and I think Altair is going to be one of the core plotting libraries for python
in the near future. You can refer to this &lt;a class=&quot;reference external&quot; href=&quot;http://pbpython.com/altair-intro.html&quot;&gt;prior post&lt;/a&gt; for an overview or look at
the &lt;a class=&quot;reference external&quot; href=&quot;https://altair-viz.github.io/gallery/index.html&quot;&gt;gallery&lt;/a&gt; for examples of what it can do. I am particularly excited about
some of the interactive options and geographic plotting capabilities.&lt;/p&gt;
&lt;p&gt;If you are comfortable with most of the other python plotting options,
take a moment and look at Altair and help the team build its capabilities. In my
experience, Altair’s plots are very nice and it’s declarative approach to visualization
is very powerful. The final &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is under active development so I think more eyes
on this project will make the overall solution that much better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;customized-or-unique-plot&quot;&gt;
&lt;h3&gt;Customized or Unique plot?&lt;/h3&gt;
&lt;p&gt;For certain types of very unique or customized plots, you may need to build your
own solution. That’s where &lt;a class=&quot;reference external&quot; href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; excels. For example, I wrote about
creating &lt;a class=&quot;reference external&quot; href=&quot;http://pbpython.com/waterfall-chart.html&quot;&gt;waterfall charts&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://pbpython.com/bullet-graph.html&quot;&gt;bullet graphs&lt;/a&gt;. Both of these chart types
would be difficult to create in any of the other tools included in this flowchart.&lt;/p&gt;
&lt;p&gt;To give you a feel for the types of charts that fall in this category, here are
some examples:&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;Waterfall and bullet chart&quot; src=&quot;http://pbpython.com/images/waterfall-bullet-chart.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In addition to building your own charts, matplotlib is the basis for the pandas and
seaborn plotting capabilities. My &lt;a class=&quot;reference external&quot; href=&quot;http://pbpython.com/effective-matplotlib.html&quot;&gt;matplotlib article&lt;/a&gt; shows how to use matplotlib
to customize your pandas plots. I think having a base understanding of how matplotlib
works is important no matter which tool you end up using.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;quick-plot&quot;&gt;
&lt;h3&gt;Quick Plot?&lt;/h3&gt;
&lt;p&gt;Since pandas is such a core part of any data analysis in python, I frequently
find myself using it to generate &lt;a class=&quot;reference external&quot; href=&quot;https://pandas.pydata.org/pandas-docs/stable/visualization.html&quot;&gt;quick plots&lt;/a&gt; that help me determine if it is
worth doing more complex plots later. You can use matplotlib to customize pandas plots or
use the basic insights to create something more complex in a tool like &lt;a class=&quot;reference external&quot; href=&quot;https://seaborn.pydata.org/&quot;&gt;seaborn&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;interactive-plots&quot;&gt;
&lt;h3&gt;Interactive Plots&lt;/h3&gt;
&lt;p&gt;The final big decision point is whether or not you need to build an interactive
plot. Altair is building some unique capabilities in this space, but
I think there will still be a need for building quick and useful applications
for visualizing data.&lt;/p&gt;
&lt;p&gt;I have written about &lt;a class=&quot;reference external&quot; href=&quot;http://pbpython.com/plotly-dash-intro.html&quot;&gt;dash&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://pbpython.com/wine_visualization.html&quot;&gt;bokeh&lt;/a&gt; in prior articles and I encourage you to
review them if you’re interested. At this point, I don’t have a clear recommendation
on which one is “best.” I think they are both really powerful and are worth considering.
They are both open source tools with the backing of respected companies. They each
have their own &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;’s and capabilities. The final solution for your needs will
come down to which approach makes the most sense to you and supports getting up
and running as quickly as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;seaborn&quot;&gt;
&lt;h3&gt;Seaborn&lt;/h3&gt;
&lt;p&gt;If you need more complex plots that facet data across rows and columns,
then &lt;a class=&quot;reference external&quot; href=&quot;https://seaborn.pydata.org/&quot;&gt;seaborn&lt;/a&gt; is going to be the right tool for the job. Similar to pandas, seaborn relies on
matplotlib so you can use the base matplotlib concepts to further customize your
seaborn plots. Here is a simple example of using seaborn to create multiple box
plots for several subsets of data.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img alt=&quot;Waterfall and bullet chart&quot; src=&quot;http://pbpython.com/images/boxplopt_facets.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Altair supports some of the faceting options that Seaborn supports so in the future,
this distinction may not be as clear. However, I think there will always be a place
for seaborn in the visualization landscape so it has an important place in your
visualization toolkit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;summary&quot;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Some complain about how python does not have the definitive plotting tool like
R’s ggplot2. However, I think the ecosystem has grown and matured over time and
the 7  different tools described here provide a lot of power for the python user.
Going forward, I plan to update this article over the months ahead as the python
visualization space continues to evolve.&lt;/p&gt;
&lt;p&gt;Feel free to comment below with questions or thoughts on these recommendations.&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Mon, 30 Apr 2018 12:10:00 +0000</pubDate>
</item>
<item>
	<title>Robin Wilson: Blogroll</title>
	<guid>http://blog.rtwilson.com/blogroll/</guid>
	<link>http://blog.rtwilson.com/blogroll/</link>
	<description>&lt;p&gt;I really enjoy reading blogs. That seems to be a slightly outdated view, as many people have moved over to using Twitter exclusively, but I like being able to follow everything that a specific person writes, and seeing mostly long-form articles rather than off-the-cuff comments.&lt;/p&gt;
&lt;p&gt;Back in the day, when blogs were really popular, every blog used to have a &amp;#8216;blogroll&amp;#8217; listing other blogs they subscribed to. That doesn&amp;#8217;t seem to be a &amp;#8216;thing&amp;#8217; any more &amp;#8211; but I thought I&amp;#8217;d put together my own blogroll. So, this is a list of blogs to which I subscribe.&lt;/p&gt;
&lt;p&gt;(For those interested, I subscribe using RSS/Atom and use &lt;a href=&quot;https://feedly.com/&quot;&gt;Feedly&lt;/a&gt; as a RSS reader online, and &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.noinnion.android.greader.reader&amp;hl=en_GB&quot;&gt;gReader&lt;/a&gt; on my phone. I used to use Google Reader, but that was discontinued by Google. I created the list below from my Feedly OPML export using &lt;a href=&quot;https://gist.github.com/650f5635eb9c28ee64c0d3bf8c5309eb&quot;&gt;this script&lt;/a&gt;, and then added the descriptions and categorisations manually.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programming&lt;/strong&gt; &amp;#8211; a range of topics are covered here, including language-specific blogs (mostly Python and R) and general programming blogs. Sadly, many blogs have stopped publishing regular articles, but their archives are well worth a read.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://planet.python.org/&quot;&gt;Planet Python&lt;/a&gt; &amp;#8211; a blog aggregator covering lots of blogs about Python, so you get a huge range of Python-related items on here, from scientific code to webapps and machine learning to databases&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://planet.scipy.org/&quot;&gt;Planet SciPy&lt;/a&gt; &amp;#8211; the same as above, but focused on scientific applications of Python&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jupyter.org/rss/&quot;&gt;Jupyter Blog&lt;/a&gt; &amp;#8211; updates from the team behind IPython and the Jupyter Notebook&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pymotw.com/3/&quot;&gt;Doug Hellmann &amp;#8211; Python Module of the Week&lt;/a&gt; &amp;#8211; the blog of the Python 3 version of the Python Module of the Week series, taking a Python module each week and doing a &amp;#8216;deep dive&amp;#8217; on it&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://prog21.dadgum.com/&quot;&gt;Programming in the 21st Century&lt;/a&gt; &amp;#8211; this blog has now closed, but the archives are great. Conveniently the final post has a &amp;#8216;best of&amp;#8217; list, so start there&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.walkingrandomly.com/&quot;&gt;Walking Randomly&lt;/a&gt; &amp;#8211; scientific programming articles from a fellow SSI fellow. See the &lt;a href=&quot;http://www.walkingrandomly.com/?page_id=502&quot;&gt;highlights page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tomaugspurger.github.io/&quot;&gt;DatasFrame&lt;/a&gt; &amp;#8211; great articles on modern, idiomatic usage of pandas, plus scaling python data analysis using tools like dask&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.johndcook.com/blog/&quot;&gt;The Endeavour&lt;/a&gt; &amp;#8211; a combination of maths, statistics and programming. The maths often goes a bit over my head, but I like it anyway.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://third-bit.com/&quot;&gt;Third Bit&lt;/a&gt; &amp;#8211; blog of Greg Wilson who founded Software Carpentry, good for thoughts on teaching programming&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://software-carpentry.org/blog/&quot;&gt;Software Carpentry&lt;/a&gt; &amp;#8211; blog of the organisation that Greg founded, also with interesting articles about teaching programming&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wesmckinney.com/archives.html&quot;&gt;Wes McKinney&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://michaelgalloy.com/&quot;&gt;michaelgalloy.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.rstudio.org/&quot;&gt;RStudio Blog&lt;/a&gt; &amp;#8211; I&amp;#8217;m not much of an R programmer, but RStudio are doing a lot of interesting things, so it&amp;#8217;s good to keep an eye on what&amp;#8217;s happening&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alexwlchan.net/&quot;&gt;alexwlchan&lt;/a&gt; &amp;#8211; Python programming and general programming articles&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ivory.idyll.org/blog&quot;&gt;Daily Life in an Ivory Basement&lt;/a&gt; &amp;#8211; blog about real-world scientific programming from a bioinformatics lab&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bost.ocks.org/mike/&quot;&gt;Mike Bostock&lt;/a&gt; &amp;#8211; from the creator of d3.js and rarely updated these days, but the archives have lots of good stuff on visualisation and cartography generally, and with d3.js specifically&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.catonmat.net/&quot;&gt;good coders code, great reuse&lt;/a&gt; &amp;#8211; most of the recent posts are about online tools for programmers and cartoons the author has written, but the archives have some really good stuff&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/pythonengineering/&quot;&gt;Python Engineering at Microsoft&lt;/a&gt; &amp;#8211; some interesting articles, particularly about Python support in the Microsoft ecosystem&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ilovesymposia.com/&quot;&gt;I Love Symposia!&lt;/a&gt; &amp;#8211; articles on scientific python programming, with a particular emphasis on image processing. From the author of &lt;em&gt;Elegant Scipy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://secretgeek.net/&quot;&gt;secretGeek.net&lt;/a&gt; &amp;#8211; general programming articles, with a bit of a Windows focus&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.msdn.com/oldnewthing/&quot;&gt;The Old New Thing&lt;/a&gt; &amp;#8211; detailed articles about Windows programming. Often a bit above me (I was never really a Win32 C/++ programmer) but some interesting articles come up sometimes&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blog&quot;&gt;The GitHub Blog&lt;/a&gt; &amp;#8211; always good to keep up with what is going on at Github&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.stackoverflow.com/&quot;&gt;stackoverflow&lt;/a&gt; &amp;#8211; also good to keep up with StackOverflow&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.joelonsoftware.com&quot;&gt;Joel on Software&lt;/a&gt; &amp;#8211; very few posts recently, but some absolutely wonderful archives from many years ago. These were the source for Joel&amp;#8217;s two books. Conveniently the homepage has an index of some of the best articles &amp;#8211; go and read them!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://steve-yegge.blogspot.com/&quot;&gt;Stevey&amp;#8217;s Blog Rants&lt;/a&gt; &amp;#8211; some interesting general programming articles, but for the really good stuff you need to go to &lt;a href=&quot;https://sites.google.com/site/steveyegge2/blog-rants&quot;&gt;Stevey&amp;#8217;s Drunken Blog Rants&lt;/a&gt; where pretty-much every article is worth reading.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codinghorror.com/&quot;&gt;Coding Horror&lt;/a&gt; &amp;#8211; same as above, some great articles many years ago, the recent stuff isn&amp;#8217;t so good.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jgc.org/&quot;&gt;John Graham-Cumming&lt;/a&gt; &amp;#8211; hasn&amp;#8217;t been updated much recently, but some good articles in the archives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ericsink.com&quot;&gt;Eric.Weblog()&lt;/a&gt; &amp;#8211; not updated any more, but some good archives such as &lt;a href=&quot;http://ericsink.com/tocs/Software_Development.html&quot;&gt;these&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;General Computing&lt;/strong&gt; &amp;#8211; fewer blogs here than I used to read, but a good way to keep up with a few areas of computing.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.righto.com/&quot;&gt;Ken Shirriff&amp;#8217;s blog&lt;/a&gt; &amp;#8211; absolutely fascinating blog about electronics and antique computers, ranging from punched card machines to early GUIs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/&quot;&gt;The Morning Paper&lt;/a&gt; &amp;#8211; an article about an interesting academic paper from computer science, every morning&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hanselman.com/blog/&quot;&gt;Scott Hanselman&amp;#8217;s Computer Zen&lt;/a&gt; &amp;#8211; general computing/programming articles, with a Windows and ASP.NET focus. Less good these days, but the archives are good.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/&quot;&gt;Windows Command Line Tools For Developers&lt;/a&gt; &amp;#8211; good way to keep up with the many improvements to the command-line experience on Windows&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://daringfireball.net/&quot;&gt;Daring Fireball&lt;/a&gt; &amp;#8211; a strange one for me to read as I&amp;#8217;m not really an &amp;#8216;Apple fanboy&amp;#8217; (even though I do use a MacBook Pro), but good to see what is happening in the worlds of iOS and macOS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.atom.io&quot;&gt;blog.atom.io&lt;/a&gt; &amp;#8211; updates on the editor that I&amp;#8217;m using to write this post&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.alfredapp.com/&quot;&gt;Alfred App &amp;#8211; Mac OS X Quicklaunch Application&lt;/a&gt; &amp;#8211; updates on the quicklaunch toolbar that I use many times a day&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remote sensing and GIS&lt;/strong&gt; &amp;#8211; many of these have also stopped publishing recently, and in general there are far too few remote sensing blogs. If you know of any more then please let me know!
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://planet.qgis.org/planet&quot;&gt;QGIS Planet&lt;/a&gt; &amp;#8211; like the Python Planet above, this aggregates many blogs about QGIS &amp;#8211; one of the key tools I use in my RS/GIS work&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.khufkens.com/blog/&quot;&gt;Koen Hufkens&lt;/a&gt; &amp;#8211; an active blog about remote sensing, ecology, programming and the &amp;#8216;scientific life&amp;#8217;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jamesoconnorkingston.wordpress.com/&quot;&gt;Photogrammetry, Science and opinion&lt;/a&gt; &amp;#8211; a blog I only recently found, about photogrammetry and remote sensing&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://earthenable.wordpress.com/&quot;&gt;EarthEnable&lt;/a&gt; &amp;#8211; remote sensing, programming and academia, with a particular focus on SAR&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fwenvi-idl.blogspot.com/&quot;&gt;Fun with ENVI/IDL&lt;/a&gt; &amp;#8211; Mort Canty&amp;#8217;s blog (whose books are also very good), focusing on classification and change detection algorithms in remote sensing&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://disneytls.blogspot.com/&quot;&gt;Adventures with a laser scanner&lt;/a&gt; &amp;#8211; point cloud processing, particularly from terrestrial laser scanners&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ordnancesurvey.co.uk/&quot;&gt;Ordnance Survey Blog&lt;/a&gt; &amp;#8211; always good to keep an eye on what the national mapping agency are up to, particularly as my wife works there!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.remotesensing.io/&quot;&gt;RemoteSensing.io&lt;/a&gt; &amp;#8211; dormant, but some good archives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sgillies.net&quot;&gt;sgillies&lt;/a&gt; &amp;#8211; dormant, but some good archives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jgomezdans.github.com&quot;&gt;EO &amp;amp; DA ramblings&lt;/a&gt; &amp;#8211; dormant, but some good archives, with a focus on data assimilation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://spectraldifferences.wordpress.com&quot;&gt;spectraldifferences | Tips and tutorials for GIS and Remote Sensing…&lt;/a&gt; &amp;#8211; dormant, but some good archives&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;General academic&lt;/strong&gt; &amp;#8211; I think all of these are actually posting articles regularly. Hooray!
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://phdcomics.com&quot;&gt;PHD Comics&lt;/a&gt; &amp;#8211; this has to be near the top, great cartoons of what it is like to work in academia. I own multiple PhD Comics books. The archives are great.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://svpow.wordpress.com/&quot;&gt;Sauropod Vertebra Picture of the Week&lt;/a&gt; &amp;#8211; completely not my field, but has some interesting things about the scientific process and scientific environment generally, as well as a lot about open access publishing&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://calnewport.com/blog/&quot;&gt;Study Hacks&lt;/a&gt; &amp;#8211; this started off as tips for studying as a student at university, but has turned in to tips and advice for any sort of &amp;#8216;knowledge work&amp;#8217;. From the author of &lt;em&gt;Deep Work&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chronicallyacademic.blogspot.com/&quot;&gt;Chronically Academic&lt;/a&gt; &amp;#8211; the blog of a recently-formed support network for chronically-ill academics&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://matt.might.net/articles/&quot;&gt;Matt Might&amp;#8217;s blog&lt;/a&gt; &amp;#8211; not many posts these days, but some excellent archives on how to do a PhD, productivity, computer science and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.software.ac.uk/index.php/blog&quot;&gt;Software Sustainability Institute&lt;/a&gt; &amp;#8211; news from the SSI, about software in science, sustainability of that software, software citation, teaching scientists to program and more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disability&lt;/strong&gt; &amp;#8211; a strange topic maybe, but as someone with a chronic illness/disability, it is good to keep up with others who have similar problems, and keep up-to-date with knowledge on my condition
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.meassociation.org.uk/&quot;&gt;ME Association&lt;/a&gt; &amp;#8211; UK association for people with ME and those who support them. Regular articles with ME-related news. I particularly like the summaries of published research.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chronicallyacademic.blogspot.com/&quot;&gt;Chronically Academic&lt;/a&gt; &amp;#8211; a network of academics with chronic illesses&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stickmancommunications.blogspot.com/&quot;&gt;Stickman Communications&lt;/a&gt; &amp;#8211; blog of a great company who make lots of products to help those with disabilities, all featuring stickmen. I use many of their products.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://batsgirl.blogspot.com/&quot;&gt;This Is My Blog&lt;/a&gt; &amp;#8211; blog by a lady with ME. Mostly baby photos over the last few years (very cute!) but the archives have some interesting insights into ME, particularly when preparing to have children&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blobolobolob.blogspot.com/&quot;&gt;Diary of a Goldfish&lt;/a&gt; &amp;#8211; quite political blog about disability. Creator of Blogging Against Disabilism Day, which I have taken part in&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thesocialworkerwhobecamedisabled.blogspot.com/&quot;&gt;The Social Worker Who Became Disabled&lt;/a&gt; &amp;#8211; another long dormant blog, but with some interesting archives. From a friend who also has ME.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;General&lt;/strong&gt; &amp;#8211; a complete mix of blogs that don&amp;#8217;t fit anywhere else, including some from friends of mine
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xkcd.com&quot;&gt;xkcd.com&lt;/a&gt; &amp;#8211; I&amp;#8217;m sure I don&amp;#8217;t need to explain this one, just go and read it &amp;#8211; and read the archives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://what-if.xkcd.com&quot;&gt;What If?&lt;/a&gt; &amp;#8211; dormant now, but has great articles asking fascinating &amp;#8216;What If&amp;#8217; questions and answering them in detail&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://theoatmeal.com/&quot;&gt;The Oatmeal &amp;#8211; Comics, Quizzes, &amp;amp; Stories&lt;/a&gt; &amp;#8211; great, and hilarious, cartoons &amp;#8211; have a look at the archives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.guardian.co.uk/tone/letters/&quot;&gt;Letters | guardian.co.uk&lt;/a&gt; &amp;#8211; letters to The Guardian newspaper in the UK, often interesting and sometimes controversial.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.monbiot.com/feed/atom/&quot;&gt;Monbiot.com&lt;/a&gt; &amp;#8211; articles from George Monbiot, including his columns from The Guardian&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.guardian.co.uk/teacher-network/series/the-secret-teacher/&quot;&gt;The Secret Teacher | The Guardian&lt;/a&gt; &amp;#8211; The Guardian&amp;#8217;s Secret Teacher series. Depressing, but enlightening.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thesimpledollar.com/author/admin/&quot;&gt;Trent Hamm – The Simple Dollar&lt;/a&gt; &amp;#8211; I think the archives are better than the more recent posts, but this blog really helped me sort out my financial situation a few years ago.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thefrugalgirl.com/&quot;&gt;The Frugal Girl&lt;/a&gt; &amp;#8211; another blog on saving money and living frugally &amp;#8211; but also a fascinating insight in to someone else&amp;#8217;s life&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mrmoneymustache.com/&quot;&gt;Mr. Money Mustache&lt;/a&gt; &amp;#8211; a slightly-more opinionated look at saving money&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://disidealist.wordpress.com/&quot;&gt;Disappointed Idealist&lt;/a&gt; &amp;#8211; fascinating articles (diatribes?) on the state of education in the UK today, from a former teacher&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thesecretbarrister.com/&quot;&gt;The Secret Barrister&lt;/a&gt; &amp;#8211; a barrister publishing about the state of the court system in the UK, and giving informed comment on cases in the media&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reprog.wordpress.com&quot;&gt;The Reinvigorated Programmer&lt;/a&gt; &amp;#8211; the personal blog from one of the authors of the &lt;a href=&quot;http://svpow.wordpress.com/&quot;&gt;Sauropod Vertebra Picture of the Week&lt;/a&gt;, with a mix of programming, culture, science, books and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://portswood.info/index.php&quot;&gt;portswood.info&lt;/a&gt; &amp;#8211; local news for the Portswood area of Southampton&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dominionstrategy.com/&quot;&gt;Dominion Strategy&lt;/a&gt; &amp;#8211; interesting articles about strategy for the card game Dominion&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ioniaguesthouse.com/&quot;&gt;Ionia Guest House&lt;/a&gt; &amp;#8211; the blog of a former supervisor of mine who is currently building a hotel in rural Turkey. Fascinating insight into the building process, and a good way to keep up to date with an old friend.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twoyearsintoronto.blogspot.com/&quot;&gt;Two years in Toronto&lt;/a&gt; &amp;#8211; the blog of a couple of friends who are spending a couple of years in Toronto&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cjtoddillustration.co.uk/&quot;&gt;Traveller C&lt;/a&gt; &amp;#8211; the blog of an artist/illustrator friend of mine &amp;#8211; look at some of the images in the archives!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thegingerallotmenteer.wordpress.com/feed/&quot;&gt;The Ginger Allotmenteer&lt;/a&gt; &amp;#8211; the blog of a friend of mine from sixth form college, focusing on her work in her allotment&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blissfullyeccentric.co.uk/&quot;&gt;blissfullyeccentric&lt;/a&gt; &amp;#8211; the blog of a friend of mine from university&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Mon, 30 Apr 2018 11:30:40 +0000</pubDate>
</item>
<item>
	<title>Steve Holden: Type Annotations in Python</title>
	<guid>http://holdenweb.blogspot.com/2018/04/type-annotations-in-python.html</guid>
	<link>http://holdenweb.blogspot.com/2018/04/type-annotations-in-python.html</link>
	<description>&lt;span&gt;&lt;b&gt;This is an edited live blog of a Python London presentation by Bernat Gabor of Bloomberg. Sorry it's taken so long to prepare. A great talk, very well presented. Thanks Bernat! Many thanks to Babylon Health for being a welcoming host.&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;PEP 484 introduced type hinting. Function annotations from PEP 3172 and variable annotations from PEP 526 have come together, and are supported by mypy. Why? Primarily to make code easier to debug, maintain and understand. An implementation supports annotation in Python 2.7, as structured comments, so there's no excuse for not using them!&lt;br /&gt;&lt;br /&gt;What do annotations NOT provide?&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Runtime type inference.&lt;/li&gt;&lt;li&gt;Performance improvements.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;In fact, annotations are effectively treated as commentary during Python parsing by the interpreter, other than ensuring that their syntax is valid. The mypy project can be used to verify that code calling functions conform to the type annotations thereon. You can also implement &quot;gradual typing&quot;: the mypy linter will report errors if your code is type-hinted. It won't complain about untyped values and functions.&lt;br /&gt;Type annotations as implemented by recent Python 3 releases (&amp;gt; 3.4) are the canonical way to do it, but require you to import all type dependencies, and the parser has to parse them. This adds a measurable time penalty, though 3.7's PEP 536 implementation will lead to increased speed.&lt;br /&gt;For older Python implementations, annotations in comments will work under any Python version (simply being ignored as comments by those versions that don't understand them), but it's &quot;kinda ugly&quot; and creates noise around your program logic. They can also lead to compatibility problems with established linters.&lt;br /&gt;&lt;br /&gt;A further option is to write interface or stub files - you can even create stubs for code you don't own and/or have access to the source of. This again works in any version because the stub files are simply ignored, but it requires no change to existing source and lets you use the latest Python features. It does, however, create a maintenance burden. Further, if your stubs don't match the code (if a function name is changed in the main file but not in the stub, for example), there are no checks to alert the programmer.&lt;br /&gt;&lt;br /&gt;Any solution not using the latest syntax is likely to cause problems in the long-term, though it won't be impossible.&lt;br /&gt;&lt;br /&gt;PEP 563, due in Python 3.7, will allow you to distribute any package with type information. Unfortunately, this will not allow annotation of local variables, only interfaces. Annotations can be incorporated into docstrings, but this isn't an especially good option, and isn't recommended.&lt;br /&gt;&lt;br /&gt;So, what kind of types can you add? Nominal types (&lt;span&gt;int&lt;/span&gt;, &lt;span&gt;float&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;, etc.) have generic containers such as &lt;span&gt;Tuple[int, float]&lt;/span&gt;, &lt;span&gt;Dict[str, int]&lt;/span&gt;, &lt;span&gt;MutableMapping[str, int]&lt;/span&gt;, &lt;span&gt;List[int]&lt;/span&gt;, &lt;span&gt;Iterable[Text]&lt;/span&gt;, and so on. Since these types are Python objects, this means you can alias types by assignment.&lt;br /&gt;&lt;br /&gt;Further nominal types include callable and generics like &lt;span&gt;TypeVar&lt;/span&gt;, as well as &lt;span&gt;Any&lt;/span&gt;, which effectively disables type checking for specific names. PEP 544 will specify protocols, and this will allow the introduction of structural typing.&lt;br /&gt;&lt;br /&gt;What are the gotchas?&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Python 2 and 3 require version-dependent checks in code intended for both environments&lt;/li&gt;&lt;li&gt;It's difficult to handle functions that have multiple return types, encouraging programmers to short-circuit type checking. While the interpreter won't complain at the resulting necessary shenanigans, various linters will be unhappy.&lt;/li&gt;&lt;li&gt;Type lookup can be problematic, as the system allows the programmer to shadow the names of types without realising it because they use the same scopes as the runtime.&lt;/li&gt;&lt;li&gt;Subclasses can support supersets of the types supported by their superclasses, but not subsets of those types. Further, subtypes whose methods have signatures requiring additional arguments must make those additional arguments optional for type checking to succeed.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Type hinting is fun, but may cause you (like David Beazley) to &lt;a href=&quot;https://twitter.com/dabeaz/status/981699763996450817&quot; target=&quot;_blank&quot;&gt;wish you had a desk-side bridge to jump off&lt;/a&gt;. If all else fails, use &lt;span&gt;# type: ignore&lt;/span&gt; to just shut the noise up, though this might be regarded as an admission of defeat.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;PEP 257 defines how to annotate your code so Sphinx can create documentation that includes type information. Just install the &lt;b&gt;sphinx-autodoc&lt;/b&gt; module and add it to to your &lt;i&gt;conf.py&lt;/i&gt; file.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What's next? MyPy is getting close to a 1.0 release, and the main focus now is on improving performance and enabling incremental typing, defining and implementing an API and a plugin system to open up the ecosystem.&lt;/div&gt;</description>
	<pubDate>Mon, 30 Apr 2018 06:24:12 +0000</pubDate>
</item>
<item>
	<title>Montreal Python User Group: Montréal-Python 71 - Burning Yeti</title>
	<guid>http://montrealpython.org/en/2018/04/mp71/</guid>
	<link>http://montrealpython.org/en/2018/04/mp71/</link>
	<description>&lt;p&gt;Enjoy our May meetup just in time before PyCon US with these amazing speakers - 2 of which will be be presenting at PyCon!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Please RSVP on &lt;a href=&quot;https://www.meetup.com/Montreal-Python/events/249850776/&quot;&gt;Meetup&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks to Google Montreal for sponsoring the event!&lt;/p&gt;
&lt;h2&gt;Presentations&lt;/h2&gt;
&lt;h3&gt;Survival analysis for conversion rates - Tristan Boudreault&lt;/h3&gt;
&lt;p&gt;What percentage of your users will spend? Typically, analysts use the conversion rate to assess how successful a website is at converting trial users into paying ones. But is this calculation giving us results that are lower than reality? With a talk rich in examples, Tristan will show how Shopify reframes the traditional conversion questions in survival analysis terms.&lt;/p&gt;
&lt;h3&gt;Data Science at Shopify - Françoise Provencher&lt;/h3&gt;
&lt;p&gt;Françoise is a data science technical lead at Shopify, a multi-channel commerce platform that has a decade-worth of data on a very diverse set of businesses. We’ll hear about how Python is particularly useful when it comes to understanding Shopify’s user base by sifting through tons of data. &lt;/p&gt;
&lt;p&gt;This presentation will be in English. &lt;/p&gt;
&lt;h3&gt;Integrate Geocode data with Python - Jean Luc Semedo&lt;/h3&gt;
&lt;p&gt;Les applications intégrant des modules de géolocalisation sont de plus en plus demandées. Avec Python, il existe de nombreuses librairies permettant de gérer la géolocalisation de façon native et très simplement. Nous allons durant cette présentation en survoler quelques-unes : Geopy, pyproj, Mapnik, GeoDjango...&lt;/p&gt;
&lt;p&gt;Jean Luc SEMEDO, Back-end and mobile developper en Freelance&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;6:00PM - Doors open&lt;/li&gt;
&lt;li&gt;6:30PM - Presentations&lt;/li&gt;
&lt;li&gt;8:30PM - End of the event&lt;/li&gt;
&lt;li&gt;9:00PM - Benelux&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;When&lt;/h2&gt;
&lt;p&gt;Monday, May 7th, 2018 at 6:00PM&lt;/p&gt;
&lt;h2&gt;Where&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.ca/maps/place/Google/@45.5020529,-73.5705927,15z/data=!4m2!3m1!1s0x0:0x31d4f0f89ff07118?sa=X&amp;ved=0ahUKEwj_0d3Y4r7XAhUp_4MKHUrhChQQ_BIIhQEwCg&quot;&gt;Google Montréal&lt;/a&gt;
1253 McGill College #150
Montréal, QC&lt;/p&gt;</description>
	<pubDate>Mon, 30 Apr 2018 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Graham Wheeler: Basic Machine Learning with SciKit-Learn</title>
	<guid>https://www.grahamwheeler.com/posts/basic-machine-learning.html</guid>
	<link>https://www.grahamwheeler.com/posts/basic-machine-learning.html</link>
	<description>&lt;div tabindex=&quot;-1&quot; id=&quot;notebook&quot; class=&quot;border-box-sizing&quot;&gt;
    &lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;em&gt;This is the fourth post in a series based off my &lt;a href=&quot;https://www.grahamwheeler.com/posts/(https:/github.com/gramster/pythonbootcamp&quot;&gt;Python for Data Science bootcamp&lt;/a&gt; I run at eBay occasionally. The other posts are:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.grahamwheeler.com/posts/python-crash-course.html&quot;&gt;a Python crash course&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;http://localhost:8888/notebooks/using-jupyter.ipynb&quot;&gt;using Jupyter&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://www.grahamwheeler.com/posts/exploratory-data-analysis-with-numpy-and-pandas.html&quot;&gt;exploratory data analysis&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;In this post we will look into the basics of building ML models with Scikit-Learn. Scikit-Learn is the most widely used Python library for ML, especially outside of deep learning (where there are several contenders and I recommend using Keras, which is a package that provides a simple API on top of several underlying contenders like TensorFlow and PyTorch).&lt;/p&gt;
&lt;p&gt;We'll proceed in this fashion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;give a brief overview of key terminology and the ML workflow&lt;/li&gt;
&lt;li&gt;illustrate the typical use of SciKit-Learn API through some simple examples&lt;/li&gt;
&lt;li&gt;discuss various metrics that can be used to evaluate ML models&lt;/li&gt;
&lt;li&gt;dive deeper with some more complex examples&lt;/li&gt;
&lt;li&gt;look at the various ways we can validate and improve our models&lt;/li&gt;
&lt;li&gt;discuss the topic of feature engineering - ML models are good examples of &quot;garbage in, garbage out&quot;, so cleaning our data and getting the right features is important&lt;/li&gt;
&lt;li&gt;finally, summarize some of the main model techniques and their pros and cons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.grahamwheeler.com/posts/basic-machine-learning.html&quot;&gt;Read more…&lt;/a&gt; (42 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 29 Apr 2018 23:40:00 +0000</pubDate>
</item>
<item>
	<title>Martin Fitzpatrick: Megasolid Idiom</title>
	<guid>https://martinfitzpatrick.name/article/word-processor-python-qt/</guid>
	<link>https://martinfitzpatrick.name/article/word-processor-python-qt/</link>
	<description>&lt;p&gt;Megasolid Idiom is a &lt;em&gt;rich text&lt;/em&gt; word processor implemented in Python and Qt. You can use it to
open, edit and save HTML-formatted files, with a WYSIWYG (what you see is what you get) format view. Only
basic formatting, headings, lists and images are supported.&lt;/p&gt;
&lt;p class=&quot;admonition admonition-tip&quot;&gt; Megasolid Idiom is based on the same code used for the &lt;a href=&quot;https://martinfitzpatrick.name/article/notepad-editor-python-qt&quot;&gt;No2Pads&lt;/a&gt;
notepad app, so take a look at that if you want an even simpler example.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Megasolid Idiom&quot; src=&quot;https://martinfitzpatrick.name/images/15-minute-apps/screenshot-wordprocessor.jpg&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;editor-subclass&quot;&gt;Editor subclass&lt;/h2&gt;
&lt;p&gt;Megasolid Idiom uses the Qt built-in &lt;code&gt;QTextEdit&lt;/code&gt; component for our rich text editor, which means that Qt handles a lot
of the complicated faff of text editing. Support for rich text (rather than plain text) is enabled by 
default, or by setting &lt;code&gt;.setAcceptRichText(True)&lt;/code&gt; on the editor.&lt;/p&gt;
&lt;p&gt;To support drag-drop insert of images into the active document, we 
subclass &lt;code&gt;QTextEdit&lt;/code&gt; to add custom Qt mime handlers.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TextEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QTextEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canInsertFromMimeData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canInsertFromMimeData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertFromMimeData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;file_ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toLocalFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocalFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_ext&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMAGE_EXTENSIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toLocalFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QTextDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toLocalFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# If we hit a non-image or non-local URL break the loop and fall out&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# to the super call &amp;amp; let Qt handle it&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# If all were valid images, finish here.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexuuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QTextDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertFromMimeData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two handlers &lt;code&gt;canInsertFromMimeData&lt;/code&gt; and &lt;code&gt;insertFromMimeData&lt;/code&gt; are Qt's methods for accepting 
mime data (e.g. images, or other objects) dropped onto your editor. The both receive a signal
parameter &lt;code&gt;source&lt;/code&gt; which receives a &lt;a href=&quot;http://doc.qt.io/qt-5/qmimedata.html&quot;&gt;QMimeData&lt;/a&gt; object. 
Similar mechanisms are used for other widget types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;canInsertFromMimeData&lt;/code&gt; is a &lt;em&gt;check&lt;/em&gt; which confirms whether a particular &lt;em&gt;type&lt;/em&gt; can be accepted by 
the widget. This method should return &lt;code&gt;True&lt;/code&gt; if you can accept the data being provided. 
If this method returns &lt;code&gt;True&lt;/code&gt; the window manager will usually show an accept-drop indicator, e.g. an 
icon with a plus-sign or a drop animation. If you return &lt;code&gt;False&lt;/code&gt; a cannot-drop indicator will be shown.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertFromMimeData&lt;/code&gt; handles the actual adding of the mime content to the document. Here we handle two cases,
one where we are adding from an image directly (try dragging an image from a browser window) and one
where drop an URL/file (try dragging a file into the window). &lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;admonition admonition-tip&quot;&gt; You can use these methods to support other types, e.g. drag-dropping text into your window. You need to add
the new type to both the &lt;code&gt;canInsertFromMimeData&lt;/code&gt; and &lt;code&gt;insertFromMimeData&lt;/code&gt; handlers.&lt;/p&gt;
&lt;h2 id=&quot;editor-config&quot;&gt;Editor config&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;QTextEdit&lt;/code&gt; component (which we've subclassed as &lt;code&gt;TextEdit&lt;/code&gt;) has some additional setup requirements.
We switch on rich text mode for the editor component and enable auto-formatting (currently only bullet lists 
from &lt;code&gt;*&lt;/code&gt;). The default font is set to &lt;em&gt;Times New Roman&lt;/em&gt; 12pt.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QMainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QVBoxLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Setup the QTextEdit editor configuration&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAutoFormatting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QTextEdit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectionChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Initialize default font size.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Times'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We need to repeat the size to init the current format.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFontPointSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need our toolbar to update automatically when clicking/selecting text within the editor. By connecting
our custom slot (&lt;code&gt;update_format&lt;/code&gt;) to the &lt;code&gt;.selectionChanged&lt;/code&gt; signal from the editor, we
receive a signal every time the current selection changes.&lt;/p&gt;
&lt;h2 id=&quot;toolbars-and-actions&quot;&gt;Toolbars and actions&lt;/h2&gt;
&lt;p&gt;The editor toolbar is setup using a &lt;code&gt;QToolBar&lt;/code&gt; to which we add a number of
widgets.&lt;/p&gt;
&lt;h3&gt;Fonts&lt;/h3&gt;
&lt;p&gt;The font dropdown is set up using &lt;code&gt;QFontComboBox&lt;/code&gt; a Qt builtin
which shows the fonts available on the host system, with each font listed
by name with a demo of the font.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.currentFontChanged&lt;/code&gt; signal is emitted by the combobox whenever the 
font is changed, passing the selected font as a parameter. By connecting
this to the &lt;code&gt;.setCurrentFont&lt;/code&gt; slot on our editor, we can use the dropdown to
update the editors' font.&lt;/p&gt;
&lt;p&gt;Font size is handled with a standard &lt;code&gt;QCombobox&lt;/code&gt; which we 
pre-fill with a default list from the constant &lt;code&gt;FONT_SIZES&lt;/code&gt;.
The &lt;code&gt;.currentIndexChanged[str]&lt;/code&gt; signal emits the current value of the combobox
when it is updated. This is passed to the editor &lt;code&gt;.setFontPointSize&lt;/code&gt;
&lt;a href=&quot;https://martinfitzpatrick.name/feeds/article/qt-transmit-extra-data-with-signals&quot;&gt;using a lambda to wrap the call&lt;/a&gt; so
we can convert it to a &lt;code&gt;float&lt;/code&gt; first.&lt;/p&gt;
&lt;h3&gt;Styles&lt;/h3&gt;
&lt;p&gt;Style handling uses checkable (toggleable) &lt;code&gt;QAction&lt;/code&gt; widgets. We add 
a key sequence for each widget to provide standard keyboard shortcuts
(e.g. &lt;code&gt;QKeySequence.Bold&lt;/code&gt;). Each &lt;code&gt;.toggled&lt;/code&gt; signal is connected to an editor
slot to trigger updates.&lt;/p&gt;
&lt;p&gt;There is no &lt;code&gt;.setFontBold&lt;/code&gt; handler, instead we must use &lt;code&gt;.setFontWeight&lt;/code&gt; to
set the weight specifically.  Qt provides a set of default weights in the 
&lt;code&gt;Qt&lt;/code&gt; namespace. The &lt;code&gt;Bold&lt;/code&gt; handler wraps the call to &lt;code&gt;.setFontWeight&lt;/code&gt;,
setting it to &lt;code&gt;QFont.Bold&lt;/code&gt; if enabled, or &lt;code&gt;QFont.Normal&lt;/code&gt; if not.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit-bold.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStatusTip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setShortcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QKeySequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFontWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bold&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit-italic.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Italic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStatusTip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Italic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setShortcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QKeySequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Italic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFontItalic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit-underline.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Underline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStatusTip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Underline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setShortcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QKeySequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Underline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFontUnderline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The actions are added both to the toolbar at the menus.&lt;/p&gt;
&lt;h3&gt;Alignment&lt;/h3&gt;
&lt;p&gt;We finally add the handlers for alignment formatting. These are set up as a &lt;code&gt;QActionGroup&lt;/code&gt; because they are
mutually exclusive: action groups function like radio buttons. Each action's &lt;code&gt;.triggered&lt;/code&gt; signal is connected
to set a specific alignment on the current paragraph via the editor &lt;code&gt;.setAlignment&lt;/code&gt;. We use a &lt;code&gt;lambda&lt;/code&gt; to 
&lt;a href=&quot;https://martinfitzpatrick.name/feeds/article/qt-transmit-extra-data-with-signals&quot;&gt;wrap this call&lt;/a&gt;, allowing us to pass the specific alignment type to the target method. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit-alignment.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Align left&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStatusTip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Align text left&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit-alignment-center.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Align center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStatusTip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Align text center&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit-alignment-right.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Align right&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStatusTip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Align text right&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignRight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit-alignment-justify.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Justify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setStatusTip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Justify text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCheckable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAlignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignJustify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;format_group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QActionGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setExclusive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;format_group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;handling-editor-updates&quot;&gt;Handling editor updates&lt;/h2&gt;
&lt;p&gt;We've defined a series of actions which, given user interaction to toggle them, 
will switch formatting in the editor. When a user selects text we also want to 
update the toolbar to match &amp;mdash;&amp;nbsp;turning the icon to bold, when a user selects some
bold text for example. The niggle here is that if we update the actions in the toolbar
they themselves will trigger an event which can undo the same action. To avoid this we 
store a &lt;code&gt;list&lt;/code&gt; of actions to be blocked when updating the format.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# A list of all format-related widgets/actions, so we can disable/enable signals when updating.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_format_actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fonts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# We don't need to disable signals for alignment, as they are paragraph-wide.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The format update function then first blocks these signals, updates the 
toolbar widgets to represent the format of the currently selected text, 
and then re-enables the format afterwards.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;block_signals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockSignals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Update the font format toolbar/actions when a new text selection is made. This is neccessary to keep&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    toolbars/etc. in sync with the current edit state.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    :return:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Disable signals for all format widgets, so changing values here does not trigger further formatting.&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_signals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_format_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fonts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCurrentFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Nasty, but we get the font-size as a float but want it was an int&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCurrentText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontPointSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())))&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;italic_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontItalic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontUnderline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QFont&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignl_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignc_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignr_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignRight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignj_action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlignJustify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_signals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_format_actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the different approaches needed to toggle the status icons. &lt;em&gt;Italic&lt;/em&gt; and &lt;em&gt;underline&lt;/em&gt; are both available
as &lt;code&gt;bool&lt;/code&gt; values from the editor, while we need to compare the current weight for &lt;em&gt;bold&lt;/em&gt;. For alignments, 
we can compare the current alignment to the Qt namespace values &lt;code&gt;Qt.AlignLeft&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The font size change is a bit unpleasant: we get the point size from the editor, convert it to an integer
(to round down) and then to a string, to apply as the current text for the box. This is neccessary since 
users are free to enter any size value, even one not currently in the list.&lt;/p&gt;
&lt;h2 id=&quot;opening-saving-files&quot;&gt;Opening &amp;amp; Saving files&lt;/h2&gt;
&lt;p&gt;The file open and save handlers are almost identical to those used in &lt;a href=&quot;https://martinfitzpatrick.name/article/notepad-editor-python-qt&quot;&gt;No2Pads&lt;/a&gt;,
with the slight tweak that we load and save as HTML for rich text. This is the only format natively supported
by the Qt rich text widget for loading and saving &amp;mdash;&amp;nbsp;to support other formats you would need
to write a converter between these. Plain text loading and saving is also supported.&lt;/p&gt;
&lt;p class=&quot;admonition admonition-note&quot;&gt; Although we don't support tables in the editor, you can load documents with them and Qt
will render them correctly. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QFileDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOpenFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Open file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTML documents (*.html);Text documents (*.txt);All files (*.*)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rU'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog_critical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Qt will automatically try and guess the format as txt/html&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file_save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# If we do not have a path, we need to use Save As.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_saveas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTML_EXTENSIONS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toPlainText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog_critical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file_saveas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QFileDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSaveFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Save file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTML documents (*.html);Text documents (*.txt);All files (*.*)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# If dialog is cancelled, will return ''&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTML_EXTENSIONS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toPlainText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dialog_critical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;future-ideas&quot;&gt;Future ideas&lt;/h2&gt;
&lt;p&gt;You could extend the Megasolid Idiom to support &amp;mdash;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Text colour formatting. The support is there in &lt;code&gt;QTextEdit&lt;/code&gt; for both foreground and background colours. 
   Take a look at &lt;a href=&quot;https://martinfitzpatrick.name/article/qcolorbutton-a-color-selector-tool-for-pyqt&quot;&gt;the QColor color-selector widget&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Add support for both import/export formats, converting via HTML.&lt;/li&gt;
&lt;/ol&gt;</description>
	<pubDate>Sun, 29 Apr 2018 17:00:00 +0000</pubDate>
</item>
<item>
	<title>Artem Golubin: How not to deploy web applications</title>
	<guid>http://rushter.com/blog/gunicorn-and-low-and-slow-attacks/</guid>
	<link>http://rushter.com/blog/gunicorn-and-low-and-slow-attacks/</link>
	<description>&lt;p&gt;Recently, I was looking for tutorials on how to deploy a Django application in 2018. After some research, I found an article which suggests using &lt;a href=&quot;http://gunicorn.org/&quot;&gt;gunicorn&lt;/a&gt; behind &lt;a href=&quot;https://www.nginx.com/&quot;&gt;nginx&lt;/a&gt; web server, which is a pretty standard way of doing it. However, one thing has caught my attention. &lt;/p&gt;
&lt;p&gt;The author of the article suggests binding a &lt;code&gt;gunicorn&lt;/code&gt; server to &lt;code&gt;0.0.0.0&lt;/code&gt;. Which opens gunicorn to the external world (the internet).&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn -b &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.0.0.0:8000 app.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At first glance, you can think that it is not a big problem and there is nothing to worry about. In reality, you should never expose an internal WSGI web server to the internet. Knowing the port, an attacker can quickly make your gunicorn server unavailable. The interesting part is that you do not need to burst it with lots of traffic. You can completely shut down the server by sending a small stream of data.&lt;/p&gt;
&lt;p&gt;By default, gunicorn uses synchronous worker model, where each worker can handle one request at a time. Luckily, that is not a big deal, because on average, a simple web application can generate a response under 200 milliseconds. So if all workers are occupied the client have to wait a few hundreds of milliseconds additionally. Also keep in mind, that most of the websites rarely get more than one requests at a time. &lt;/p&gt;
&lt;p&gt;In gunicorn, the defau ...&lt;/p&gt;</description>
	<pubDate>Sun, 29 Apr 2018 11:04:10 +0000</pubDate>
</item>
<item>
	<title>EuroPython Society: EuroPython 2018: Website Launched</title>
	<guid>https://www.europython-society.org/post/173410370105</guid>
	<link>https://www.europython-society.org/post/173410370105</link>
	<description>&lt;p&gt;We are excited to announce the launch of the EuroPython 2018 website.&lt;/p&gt;&lt;a href=&quot;https://ep2018.europython.eu/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://78.media.tumblr.com/0f5f02e69dad7f94b80b1e9a99baa298/tumblr_inline_p7wt72x3Ub1swlzyf_540.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;https://ep2018.europython.eu/&quot; target=&quot;_blank&quot;&gt;https://ep2018.europython.eu/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The EuroPython conference will take place in Edinburgh, UK, this year, from July 23 - 29.&lt;/p&gt;&lt;h2&gt;EuroPython 2018 - The European Python Conference&lt;/h2&gt;&lt;p&gt;Here’s an overview of what you can expect in Edinburgh:&lt;/p&gt;&lt;p&gt;We will start with the Workshops and the Trainings on Monday and Tuesday, July 23-24.&lt;/p&gt;&lt;p&gt;The main 3 conference day follow, packed with keynotes, talks, helpdesks, panels and open space sessions.&lt;/p&gt;&lt;p&gt;A complete PyData EuroPython 2018 will be included as well.&lt;/p&gt;&lt;p&gt;The two weekend days after the conference, July 28 and 29, are reserved for sprints.&lt;/p&gt;&lt;p&gt;Overall, we will again have 7 days worth of great Python content, arranged in over 120 sessions, waiting for you.&lt;/p&gt;&lt;p&gt;In short:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Monday, Tuesday, July 23-24: Workshops and Trainings and Beginners&amp;rsquo; Day&lt;/li&gt;
&lt;li&gt;Wednesday - Friday, July 25-27: Main Conference with talks, keynotes, exhibit, panels, posters, helpdesks and open sessions.&lt;/li&gt;
&lt;li&gt;Saturday, Sunday, July 28-29: Sprints.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Meet our launch sponsors&lt;/h2&gt;&lt;p&gt;All this would not be possible without the generous help of our launch sponsors:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://smarkets.com/&quot; target=&quot;_blank&quot;&gt;Smarkets&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.datadoghq.com/&quot; target=&quot;_blank&quot;&gt;Datadog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us&quot; target=&quot;_blank&quot;&gt;Intel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot; target=&quot;_blank&quot;&gt;Jetbrains&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.numberly.com/&quot; target=&quot;_blank&quot;&gt;numberly / 1000mercis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the coming days, we will provide you with more information and announce the start of the Call for Proposals and Early Bird Ticket sales. Please watch our EuroPython blog for updates.&lt;/p&gt;&lt;p&gt;Enjoy,&lt;br /&gt;&amp;ndash;&lt;br /&gt;EuroPython 2018 Team&lt;br /&gt;&lt;a href=&quot;https://ep2018.europython.eu/&quot; target=&quot;_blank&quot;&gt;https://ep2018.europython.eu/&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.europython-society.org/&quot; target=&quot;_blank&quot;&gt;https://www.europython-society.org/&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 29 Apr 2018 08:38:30 +0000</pubDate>
</item>
<item>
	<title>EuroPython: EuroPython 2018: Website Launched</title>
	<guid>https://blog.europython.eu/post/173410325282</guid>
	<link>https://blog.europython.eu/post/173410325282</link>
	<description>&lt;p&gt;We are excited to announce the launch of the EuroPython 2018 website.&lt;/p&gt;&lt;a href=&quot;https://ep2018.europython.eu/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://78.media.tumblr.com/0f5f02e69dad7f94b80b1e9a99baa298/tumblr_inline_p7wt72x3Ub1swlzyf_540.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;https://ep2018.europython.eu/&quot; target=&quot;_blank&quot;&gt;https://ep2018.europython.eu/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The EuroPython conference will take place in Edinburgh, UK, this year, from July 23 - 29.&lt;/p&gt;&lt;h2&gt;EuroPython 2018 - The European Python Conference&lt;/h2&gt;&lt;p&gt;Here’s an overview of what you can expect in Edinburgh:&lt;/p&gt;&lt;p&gt;We will start with the Workshops and the Trainings on Monday and Tuesday, July 23-24.&lt;/p&gt;&lt;p&gt;The main 3 conference day follow, packed with keynotes, talks, helpdesks, panels and open space sessions.&lt;/p&gt;&lt;p&gt;A complete PyData EuroPython 2018 will be included as well.&lt;/p&gt;&lt;p&gt;The two weekend days after the conference, July 28 and 29, are reserved for sprints.&lt;/p&gt;&lt;p&gt;Overall, we will again have 7 days worth of great Python content, arranged in over 120 sessions, waiting for you.&lt;/p&gt;&lt;p&gt;In short:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Monday, Tuesday, July 23-24: Workshops and Trainings and Beginners&amp;rsquo; Day&lt;/li&gt;
&lt;li&gt;Wednesday - Friday, July 25-27: Main Conference with talks, keynotes, exhibit, panels, posters, helpdesks and open sessions.&lt;/li&gt;
&lt;li&gt;Saturday, Sunday, July 28-29: Sprints.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Meet our launch sponsors&lt;/h2&gt;&lt;p&gt;All this would not be possible without the generous help of our launch sponsors:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://smarkets.com/&quot; target=&quot;_blank&quot;&gt;Smarkets&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.datadoghq.com/&quot; target=&quot;_blank&quot;&gt;Datadog&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us&quot; target=&quot;_blank&quot;&gt;Intel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot; target=&quot;_blank&quot;&gt;Jetbrains&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.numberly.com/&quot; target=&quot;_blank&quot;&gt;numberly / 1000mercis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the coming days, we will provide you with more information and announce the start of the Call for Proposals and Early Bird Ticket sales. Please watch our EuroPython blog for updates.&lt;/p&gt;&lt;p&gt;Enjoy,&lt;br /&gt;&amp;ndash;&lt;br /&gt;EuroPython 2018 Team&lt;br /&gt;&lt;a href=&quot;https://ep2018.europython.eu/&quot; target=&quot;_blank&quot;&gt;https://ep2018.europython.eu/&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.europython-society.org/&quot; target=&quot;_blank&quot;&gt;https://www.europython-society.org/&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 29 Apr 2018 08:35:44 +0000</pubDate>
</item>
<item>
	<title>Twisted Matrix Labs: Twisted 18.4.0 Released</title>
	<guid>http://feedproxy.google.com/~r/TwistedMatrixLaboratories/~3/vxhnwHBpioQ/twisted-1840-released.html</guid>
	<link>http://feedproxy.google.com/~r/TwistedMatrixLaboratories/~3/vxhnwHBpioQ/twisted-1840-released.html</link>
	<description>On behalf of Twisted Matrix Laboratories, I'm honoured to       announce the release of Twisted 18.4.0!&lt;br /&gt;&lt;br /&gt;     The highlights of the release are:&lt;br /&gt;      &lt;br /&gt;     &lt;ul&gt;&lt;li&gt;The dropping of Python 3.3 support.     &lt;/li&gt;&lt;li&gt;Python 3 fixes (notably to trial -j,       asyncioreactor, conch, and mail)     &lt;/li&gt;&lt;li&gt;Python 3 TCP speed improvements (less copying       when sending data)     &lt;/li&gt;&lt;li&gt;Better TLS curve selection support for both old       and new OpenSSLs     &lt;/li&gt;&lt;li&gt;IPv6 fixes for WSGIResource     &lt;/li&gt;&lt;li&gt;60+ closed tickets with many fixed bugs!&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;de1&quot;&gt;&lt;div class=&quot;&quot;&gt;For more information, check the NEWS file (link         provided below).&lt;br class=&quot;&quot; /&gt;        &lt;br class=&quot;&quot; /&gt;        You can find the downloads at &amp;lt;&lt;span class=&quot;&quot;&gt;&lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;https://pypi.python.org/pypi/Twisted&quot;&gt;https://pypi.python.org/pypi/Twisted&lt;/a&gt;&lt;/span&gt;&amp;gt;         (or alternatively &amp;lt;&lt;span class=&quot;&quot;&gt;&lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;http://twistedmatrix.com/trac/wiki/Downloads&quot;&gt;http://twistedmatrix.com/trac/wiki/Downloads&lt;/a&gt;&lt;/span&gt;&amp;gt;).         The NEWS file is also available at &amp;lt;&lt;span class=&quot;&quot;&gt;&lt;a class=&quot;moz-txt-link-freetext&quot; href=&quot;https://github.com/twisted/twisted/blob/twisted-18.4.0/NEWS.rst&quot;&gt;https://github.com/twisted/twisted/blob/twisted-18.4.0/NEWS.rst&lt;/a&gt;&lt;/span&gt;&amp;gt;.&lt;br class=&quot;&quot; /&gt;        &lt;br class=&quot;&quot; /&gt;        Many thanks to everyone who had a part in this release - the         supporters of the Twisted Software Foundation, the developers         who contributed code as well as documentation, and all the         people building great things with Twisted!&lt;br class=&quot;&quot; /&gt;        &lt;br class=&quot;&quot; /&gt;        Twisted Regards,&lt;br class=&quot;&quot; /&gt;        Amber Brown (HawkOwl)&lt;/div&gt;&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/TwistedMatrixLaboratories/~4/vxhnwHBpioQ&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Sun, 29 Apr 2018 04:19:11 +0000</pubDate>
</item>

</channel>
</rss>
